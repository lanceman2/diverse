# CMakeLists.txt to build DGL

PROJECT( DGL )

# DEFINE INFORMATION REQUIRED FOR GLOBAL CONFIGURATION OF DIVERSE
SET( DGL_MAJOR_VERSION 3 )
SET( DGL_MINOR_VERSION 0 )
SET( DGL_BUILD_VERSION 1 )
SET( DGL_VERSION
"${DGL_MAJOR_VERSION}.${DGL_MINOR_VERSION}.${DGL_BUILD_VERSION}" )

SET( LIBDGL_MAJOR_VERSION 1 )
SET( LIBDGL_MINOR_VERSION 0 )
SET( LIBDGL_BUILD_VERSION 1 )
SET( LIBDGL_VERSION
"${LIBDGL_MAJOR_VERSION}.${LIBDGL_MINOR_VERSION}.${LIBDGL_BUILD_VERSION}" )

SET( DGL_HOMEPAGE "http://diverse.sourceforge.net/" )
SET( DGL_RELEASE_DATE "Fri Dec 12 18:00:00 EDT 2008" )

SET( PACKAGE "dgl" )
SET( PACKAGE_BUGREPORT "diverse-devel@lists.sourceforge.net" )
SET( PACKAGE_NAME "DIVERSE interface to OpenGL" )
SET( PACKAGE_STRING "DIVERSE interface to OpenGL ${DGL_VERSION}" )
SET( PACKAGE_TARNAME "dgl" )
# END DEFINITIONS

SET( BUILD_SHARED_LIBS ON )
SET( CMAKE_SKIP_RPATH OFF )
SET( CMAKE_INSTALL_RPATH_USE_LINK_PATH ON )
SET( CMAKE_BUILD_WITH_INSTALL_RPATH ON )
SET( CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib" )
SET( CMAKE_INSTALL_NAME_DIR "${CMAKE_INSTALL_PREFIX}/lib" )
SET( CMAKE_FIND_FRAMEWORK "LAST" )
SET( CMAKE_FIND_APPBUNDLE "LAST" )

# Package distribution
IF( NOT DIVERSE_ALL_IN_ONE_BUILD )
	SET( CPACK_PACKAGE_DESCRIPTION_SUMMARY "DGL ${DGL_VERSION}" )
	SET( CPACK_PACKAGE_NAME "dgl" )
	SET( CPACK_PACKAGE_VENDOR "The DIVERSE Team" )
	SET( CPACK_PACKAGE_VERSION_MAJOR "${DGL_MAJOR_VERSION}" )
	SET( CPACK_PACKAGE_VERSION_MINOR "${DGL_MINOR_VERSION}" )
	SET( CPACK_PACKAGE_VERSION_PATCH "${DGL_BUILD_VERSION}" )
	SET( CPACK_RESOURCE_FILE_LICENSE "${DGL_SOURCE_DIR}/dtk/COPYING.GPL" )
	SET( CPACK_GENERATOR "TGZ;TBZ2;ZIP" )
	SET( CPACK_SOURCE_GENERATOR "TGZ;TBZ2;ZIP" )
	IF( ${CMAKE_SYSTEM_NAME} MATCHES "Darwin" )
		SET( CPACK_BINARY_GENERATOR "TGZ;TBZ2;ZIP;PackageMaker" )
	ELSEIF( ${CMAKE_SYSTEM_NAME} MATCHES "Windows" )
		SET( CPACK_BINARY_GENERATOR "ZIP;NSIS;MSI" )
	ELSE( ${CMAKE_SYSTEM_NAME} MATCHES "Darwin" )
		SET( CPACK_BINARY_GENERATOR "TGZ;TBZ2;ZIP" )
	ENDIF( ${CMAKE_SYSTEM_NAME} MATCHES "Darwin" )
	INCLUDE( CPack )
	IF( UNIX )
		INCLUDE(UseRPMTools )
		IF(RPMTools_FOUND )
			RPMTools_ADD_RPM_TARGETS(dgl )
		ENDIF(RPMTools_FOUND )
	ENDIF( UNIX )
ENDIF( NOT DIVERSE_ALL_IN_ONE_BUILD )

IF( DEFINED DIVERSE_STYLE_SHEET )
ELSE( DEFINED DIVERSE_STYLE_SHEET )
	SET( DIVERSE_STYLE_SHEET "docs.css" )
ENDIF( DEFINED DIVERSE_STYLE_SHEET )

# Set DGL_ARCH
SET( DGL_ARCH ${CMAKE_SYSTEM_NAME} )
IF( UNIX )
	EXECUTE_PROCESS( COMMAND echo ${DGL_ARCH}
			COMMAND tr '[:lower:]' '[:upper:]'
			OUTPUT_VARIABLE DGL_ARCH_UPPER OUTPUT_STRIP_TRAILING_WHITESPACE )
	SET( DGL_PROCESSOR ${CMAKE_SYSTEM_PROCESSOR} )
	EXECUTE_PROCESS( COMMAND date OUTPUT_VARIABLE DGL_COMPILE_DATE
			OUTPUT_STRIP_TRAILING_WHITESPACE )
	EXECUTE_PROCESS( COMMAND whoami OUTPUT_VARIABLE DGL_WHO_COMPILED
			OUTPUT_STRIP_TRAILING_WHITESPACE )
	EXECUTE_PROCESS( COMMAND hostname OUTPUT_VARIABLE DGL_COMPILE_HOST
			OUTPUT_STRIP_TRAILING_WHITESPACE )
ELSEIF( WIN32 )
	SET( DGL_ARCH_UPPER "WIN32" )
	EXECUTE_PROCESS( COMMAND date /t OUTPUT_VARIABLE DGL_COMPILE_DATE
			OUTPUT_STRIP_TRAILING_WHITESPACE )
	IF( NOT DGL_COMPILE_DATE )
		SET( DGL_COMPILE_DATE ${DGL_RELEASE_DATE} )
	ENDIF( NOT DGL_COMPILE_DATE )
	SET( DGL_WHO_COMPILED $ENV{USERNAME} )
	SET( DGL_COMPILE_HOST $ENV{USERDOMAIN} )
ENDIF( UNIX )

SET( DARWIN_GL_FIX_FLAGS "" )
IF( DGL_ARCH_UPPER STREQUAL "DARWIN" )
	STRING( REGEX REPLACE "\\..*" "" DARWIN_VERSION ${CMAKE_SYSTEM_VERSION} )
	IF( DARWIN_VERSION EQUAL 9 )
		SET( DARWIN_GL_FIX_FLAGS  "-dylib_file /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGL.dylib:/System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGL.dylib" )
	ENDIF( DARWIN_VERSION EQUAL 9 )
ENDIF( DGL_ARCH_UPPER STREQUAL "DARWIN" )

# Find X11 headers and libraries
IF( UNIX )
	INCLUDE( FindX11 )
	IF( X11_FOUND )
		IF( X11_X11_LIB AND X11_Xext_LIB AND X11_X11_INCLUDE_PATH AND
				X11_Xlib_INCLUDE_PATH )
			GET_FILENAME_COMPONENT( X11_LIB_PATH ${X11_X11_LIB} PATH )
			GET_FILENAME_COMPONENT( Xext_LIB_PATH ${X11_Xext_LIB} PATH )
			SET( DGL_X11_LDFLAGS "-L${Xext_LIB_PATH} -lXext -L${X11_LIB_PATH}
-lX11" )
			SET( DGL_X11_CXXFLAGS "-I${X11_Xlib_INCLUDE_PATH}" )
		ENDIF( X11_X11_LIB AND X11_Xext_LIB AND X11_X11_INCLUDE_PATH AND
				X11_Xlib_INCLUDE_PATH )

		IF( X11_Xtst_LIB )
			GET_FILENAME_COMPONENT( Xtst_LIB_PATH ${X11_Xtst_LIB} PATH )
			SET( DGL_Xtst_LDFLAGS "-L${Xtst_LIB_PATH} -lXtst" )
			SET( DGL_Xtst_CXXFLAGS "-I${X11_Xtst_INCLUDE_PATH}" )
		ENDIF( X11_Xtst_LIB )

		FIND_PATH( GLX_HEADER_PATH GL/glx.h PATHS ${X11_X11_INCLUDE_PATH}
				${X11_INC_SEARCH_PATH} DOC "Location of GL/glx.h" )
		IF( GLX_HEADER_PATH AND EXISTS ${GLX_HEADER_PATH}/GL/glxext.h )
			EXECUTE_PROCESS( COMMAND grep -q glXJoinSwapGroupNV ${GLX_HEADER_PATH}/GL/glxext.h
					RESULT_VARIABLE HAS_GLXJOINSWAPGROUPNV
					OUTPUT_STRIP_TRAILING_WHITESPACE )
			IF( HAS_GLXJOINSWAPGROUPNV EQUAL 0 )
				SET( DADS_HAS_GLXJOINSWAPGROUPNV OFF )
			ELSE( HAS_GLXJOINSWAPGROUPNV EQUAL 0 )
				SET( DADS_HAS_GLXJOINSWAPGROUPNV ON )
			ENDIF( HAS_GLXJOINSWAPGROUPNV EQUAL 0 )
			OPTION( DGL_BUILD_WITH_DGLNVSWAPBARRIER "Build nvswapbarrier DSO for use with NVIDIA Quadro cards which support framelock and genlock."
					${DADS_HAS_GLXJOINSWAPGROUPNV} )
			SET( DGL_INCLUDE -I${GLX_HEADER_PATH} )
		ENDIF( GLX_HEADER_PATH AND EXISTS ${GLX_HEADER_PATH}/GL/glxext.h )
	ENDIF( X11_FOUND )

	INCLUDE( FindCurses )
	IF( CURSES_LIBRARY AND CURSES_INCLUDE_PATH )
		GET_FILENAME_COMPONENT( CURSES_LIBRARY_PATH ${CURSES_LIBRARY} PATH )
		GET_FILENAME_COMPONENT( CURSES_LIBRARY_NAME ${CURSES_LIBRARY} NAME_WE )
		STRING( REGEX REPLACE "^lib(.*)" "\\1" CURSES_LIB_NAME
				${CURSES_LIBRARY_NAME} )
		SET( DGL_CURSES_CXXFLAGS "-I${CURSES_INCLUDE_PATH}" )

		# Mac OS X 10.4 and prior do not support rpath
		IF( DGL_ARCH_UPPER MATCHES DARWIN )
			IF( DARWIN_VERSION LESS 9 )
				SET( DGL_CURSES_LDFLAGS "-L${CURSES_LIBRARY_PATH} -l${CURSES_LIB_NAME}" )
			ELSE( DARWIN_VERSION LESS 9 )
				SET( DGL_CURSES_LDFLAGS "-L${CURSES_LIBRARY_PATH} -Wl,-rpath -Wl,${CURSES_LIBRARY_PATH} -l${CURSES_LIB_NAME}" )
			ENDIF( DARWIN_VERSION LESS 9 )
		ELSE( DGL_ARCH_UPPER MATCHES DARWIN )
			SET( DGL_CURSES_LDFLAGS "-L${CURSES_LIBRARY_PATH} -Wl,-rpath -Wl,${CURSES_LIBRARY_PATH} -l${CURSES_LIB_NAME}" )
		ENDIF( DGL_ARCH_UPPER MATCHES DARWIN )
	ENDIF( CURSES_LIBRARY AND CURSES_INCLUDE_PATH )
ENDIF( UNIX )

# Find OpenGL headers and libraries
SET( OPENGL_NO_FRAMEWORKS "YES" )
INCLUDE( FindOpenGL )
IF( OPENGL_FOUND )
	GET_FILENAME_COMPONENT( OPENGL_gl_LIBRARY_PATH ${OPENGL_gl_LIBRARY} PATH )
	GET_FILENAME_COMPONENT( OPENGL_glu_LIBRARY_PATH ${OPENGL_glu_LIBRARY} PATH )

	IF( ${OPENGL_gl_LIBRARY_PATH} MATCHES ${OPENGL_glu_LIBRARY_PATH} )
		SET( OPENGL_LIBRARY_PATH "-L${OPENGL_gl_LIBRARY_PATH}" )
	ELSE( ${OPENGL_gl_LIBRARY_PATH} MATCHES ${OPENGL_glu_LIBRARY_PATH} )
		SET( OPENGL_LIBRARY_PATH "-L${OPENGL_gl_LIBRARY_PATH} -L${OPENGL_glu_LIBRARY_PATH}" )
	ENDIF( ${OPENGL_gl_LIBRARY_PATH} MATCHES ${OPENGL_glu_LIBRARY_PATH} )

	IF( DGL_ARCH_UPPER MATCHES LINUX )
		SET( DGL_LIBRARY_ENV_VAR "LD_LIBRARY_PATH" )
		SET( DGL_LIB_FLAGS "${OPENGL_LIBRARY_PATH} -lGL -lGLU" )
		SET( DGL_OTHER_LIBS "-ldl -lpthread -lc -lm" )
	ELSEIF( DGL_ARCH_UPPER MATCHES IRIX )
		SET( DGL_LIBRARY_ENV_VAR "LD_LIBRARY_PATH" )
		SET( DGL_OTHER_LIBS "" )
	ELSEIF( DGL_ARCH_UPPER MATCHES WIN32 )
		SET( DGL_LIB_FLAGS "${OPENGL_gl_LIBRARY}.lib ${OPENGL_glu_LIBRARY}.lib" )
		SET( DGL_OTHER_LIBS "" )
	ELSEIF( DGL_ARCH_UPPER MATCHES DARWIN )
		SET( DGL_LIBRARY_ENV_VAR "DYLD_LIBRARY_PATH" )
		SET( DGL_LIB_FLAGS "${OPENGL_LIBRARY_PATH} -lGL -lGLU -lstdc++ ${DARWIN_GL_FIX_FLAGS}" )
		SET( DGL_OTHER_LIBS "-ldl -lpthread -lc -lm" )
	ENDIF( DGL_ARCH_UPPER MATCHES LINUX )
ENDIF( OPENGL_FOUND )

SET( DGL_INCLUDE "${DGL_INCLUDE} -I${CMAKE_INSTALL_PREFIX}/include" )
IF( DGL_ARCH_UPPER MATCHES "LINUX" )
	SET( DGL_LIBS "${DGL_LIB_FLAGS} -L${CMAKE_INSTALL_PREFIX}/lib -Wl,-rpath -Wl,${CMAKE_INSTALL_PREFIX}/lib -ldgl" )
ELSEIF( DGL_ARCH_UPPER MATCHES "DARWIN" )
	IF( DARWIN_VERSION LESS 9 )
		SET( DGL_LIBS "${DGL_LIB_FLAGS} -L${CMAKE_INSTALL_PREFIX}/lib -ldgl" )
	ELSE( DARWIN_VERSION LESS 9 )
		SET( DGL_LIBS "${DGL_LIB_FLAGS} -L${CMAKE_INSTALL_PREFIX}/lib -Wl,-rpath -Wl,${CMAKE_INSTALL_PREFIX}/lib -ldgl" )
	ENDIF( DARWIN_VERSION LESS 9 )
ELSEIF( DGL_ARCH_UPPER MATCHES "WIN32" )
	SET( DGL_LIBS "${DGL_LIB_FLAGS} -LIBPATH:${CMAKE_INSTALL_PREFIX}/lib dgl.lib" )
ENDIF( DGL_ARCH_UPPER MATCHES "LINUX" )

OPTION( DGL_BUILD_DOCUMENTATION "Build DGL documentation with doxygen/dot."
		ON )

OPTION( DGL_BUILD_EXAMPLES "Build DGL examples" OFF )

# Find and use dtk-config
IF( DIVERSE_ALL_IN_ONE_BUILD )
	SET( DTK_CONFIG_BIN "LD_LIBRARY_PATH=${DIVERSE_BINARY_DIR}/dtk/lib/dtk ${DIVERSE_BINARY_DIR}/dtk/config/dtk-config" )
	SET( DTK_DIR ${DIVERSE_SOURCE_DIR}/dtk )
	EXECUTE_PROCESS( COMMAND ${DTK_CONFIG_BIN} --version
		OUTPUT_VARIABLE DTK_VERSION OUTPUT_STRIP_TRAILING_WHITESPACE )
	EXECUTE_PROCESS( COMMAND ${DTK_CONFIG_BIN} --cflags
		OUTPUT_VARIABLE DTK_CXX_FLAGS OUTPUT_STRIP_TRAILING_WHITESPACE )
	EXECUTE_PROCESS( COMMAND ${DTK_CONFIG_BIN} --libs
		OUTPUT_VARIABLE DTK_LIB_FLAGS OUTPUT_STRIP_TRAILING_WHITESPACE )
	EXECUTE_PROCESS( COMMAND ${DTK_CONFIG_BIN} --include
		OUTPUT_VARIABLE DTK_INCLUDE_FLAGS OUTPUT_STRIP_TRAILING_WHITESPACE )
	SET( DTK_LIB "dtk" )
	SET( DTK_INCLUDE "${DTK_DIR}/include" )
ELSE( DIVERSE_ALL_IN_ONE_BUILD )
	FIND_PROGRAM( DTK_CONFIG_BIN dtk-config /usr /usr/local ENV PATH
		DOC "Location of dtk-config" )
	IF( DTK_CONFIG_BIN )
		EXECUTE_PROCESS( COMMAND ${DTK_CONFIG_BIN} --root
			OUTPUT_VARIABLE DTK_DIR OUTPUT_STRIP_TRAILING_WHITESPACE )
		EXECUTE_PROCESS( COMMAND ${DTK_CONFIG_BIN} --version
			OUTPUT_VARIABLE DTK_VERSION OUTPUT_STRIP_TRAILING_WHITESPACE )
		EXECUTE_PROCESS( COMMAND ${DTK_CONFIG_BIN} --cflags
			OUTPUT_VARIABLE DTK_CXX_FLAGS OUTPUT_STRIP_TRAILING_WHITESPACE )
		EXECUTE_PROCESS( COMMAND ${DTK_CONFIG_BIN} --libs
			OUTPUT_VARIABLE DTK_LIB_FLAGS OUTPUT_STRIP_TRAILING_WHITESPACE )
		EXECUTE_PROCESS( COMMAND ${DTK_CONFIG_BIN} --include
			OUTPUT_VARIABLE DTK_INCLUDE_FLAGS OUTPUT_STRIP_TRAILING_WHITESPACE )
		SET( DTK_LIB "${DTK_LIB_FLAGS}" )
		SET( DTK_INCLUDE "${DTK_DIR}/include" )
	ENDIF( DTK_CONFIG_BIN )
ENDIF( DIVERSE_ALL_IN_ONE_BUILD )

SET( DGL_INCLUDE "${DTK_INCLUDE_FLAGS} ${DGL_INCLUDE}" )
SET( DGL_LIBS "${DTK_LIB_FLAGS} ${DGL_LIBS}" )

# Find OpenThreads headers and libraries
INCLUDE( FindOpenThreads )
IF( OPENTHREADS_FOUND )
	IF( CMAKE_BUILD_TYPE MATCHES "DEBUG" )
		SET( DGL_OPENTHREADS_LIBRARY ${OPENTHREADS_LIBRARY_DEBUG} )
	ELSE( CMAKE_BUILD_TYPE MATCHES "DEBUG" )
		SET( DGL_OPENTHREADS_LIBRARY ${OPENTHREADS_LIBRARY} )
	ENDIF( CMAKE_BUILD_TYPE MATCHES "DEBUG" )

	SET( DGL_OPENTHREADS_CXXFLAGS "-I${OPENTHREADS_INCLUDE_DIR}" )
	GET_FILENAME_COMPONENT( OPENTHREADS_LIBRARY_PATH
			${DGL_OPENTHREADS_LIBRARY} PATH )
	GET_FILENAME_COMPONENT( OPENTHREADS_LIBRARY_NAME
			${DGL_OPENTHREADS_LIBRARY} NAME )
	GET_FILENAME_COMPONENT( OPENTHREADS_LIB_NAME
			${DGL_OPENTHREADS_LIBRARY} NAME_WE )
	STRING( REGEX REPLACE "^lib(.*)" "\\1" OPENTHREADS_LIB_NAME
			${OPENTHREADS_LIB_NAME} )

	IF( DGL_ARCH_UPPER MATCHES "LINUX" )
		SET( DGL_OPENTHREADS_LDFLAGS "-L${OPENTHREADS_LIBRARY_PATH} -Wl,-rpath -Wl,${OPENTHREADS_LIBRARY_PATH} -l${OPENTHREADS_LIB_NAME}" )
	ELSEIF( DGL_ARCH_UPPER MATCHES "DARWIN" )
		IF( DARWIN_VERSION LESS 9 )
			SET( DGL_OPENTHREADS_LDFLAGS "-L${OPENTHREADS_LIBRARY_PATH} -l${OPENTHREADS_LIB_NAME}" )
		ELSE( DARWIN_VERSION LESS 9 )
			SET( DGL_OPENTHREADS_LDFLAGS "-L${OPENTHREADS_LIBRARY_PATH} -Wl,-rpath -Wl,${OPENTHREADS_LIBRARY_PATH} -l${OPENTHREADS_LIB_NAME}" )
		ENDIF( DARWIN_VERSION LESS 9 )
	ELSEIF( DGL_ARCH_UPPER MATCHES "WIN32" )
#		SET( DGL_OPENTHREADS_LDFLAGS "-LIBPATH:${OPENTHREADS_LIBRARY_PATH} ${OPENTHREADS_LIBRARY_NAME}" )
		SET( DGL_OPENTHREADS_LDFLAGS "\"${OPENTHREADS_LIBRARY_PATH}/${OPENTHREADS_LIBRARY_NAME}\"" )
	ENDIF( DGL_ARCH_UPPER MATCHES "LINUX" )
ENDIF( OPENTHREADS_FOUND )

# Find Producer headers and libraries
INCLUDE( FindProducer )
IF( PRODUCER_FOUND )
	IF( CMAKE_BUILD_TYPE MATCHES "DEBUG" )
		SET( DGL_PRODUCER_LIBRARY ${PRODUCER_LIBRARY_DEBUG} )
	ELSE( CMAKE_BUILD_TYPE MATCHES "DEBUG" )
		SET( DGL_PRODUCER_LIBRARY ${PRODUCER_LIBRARY} )
	ENDIF( CMAKE_BUILD_TYPE MATCHES "DEBUG" )

	SET( DGL_PRODUCER_CXXFLAGS "-I${PRODUCER_INCLUDE_DIR} ${DGL_OPENTHREADS_CXXFLAGS} ${PRODUCER_DEFINITION_FLAGS}" )
	GET_FILENAME_COMPONENT( PRODUCER_LIBRARY_PATH
			${DGL_PRODUCER_LIBRARY} PATH )
	GET_FILENAME_COMPONENT( PRODUCER_LIBRARY_NAME
			${DGL_PRODUCER_LIBRARY} NAME )
	GET_FILENAME_COMPONENT( PRODUCER_LIB_NAME
			${DGL_PRODUCER_LIBRARY} NAME_WE )
	STRING( REGEX REPLACE "^lib(.*)" "\\1" PRODUCER_LIB_NAME
			${PRODUCER_LIB_NAME} )

	IF( DGL_ARCH_UPPER MATCHES "LINUX" )
		SET( DGL_PRODUCER_LDFLAGS "${DGL_OPENTHREADS_LDFLAGS} -L${PRODUCER_LIBRARY_PATH} -Wl,-rpath -Wl,${PRODUCER_LIBRARY_PATH} -l${PRODUCER_LIB_NAME}" )
	ELSEIF( DGL_ARCH_UPPER MATCHES "DARWIN" )
		SET( DGL_PRODUCER_LDFLAGS "${DGL_OPENTHREADS_LDFLAGS} -L${PRODUCER_LIBRARY_PATH} -l${PRODUCER_LIB_NAME}" )
	ELSEIF( DGL_ARCH_UPPER MATCHES "WIN32" )
		SET( DGL_PRODUCER_LDFLAGS "${DGL_OPENTHREADS_LDFLAGS} \"${PRODUCER_LIBRARY_PATH}/${PRODUCER_LIBRARY_NAME}\"" )
	ENDIF( DGL_ARCH_UPPER MATCHES "LINUX" )
ENDIF( PRODUCER_FOUND )

SET( DGL_INCLUDE "${DGL_PRODUCER_CXXFLAGS} ${DGL_INCLUDE}" )
SET( DGL_LIBS "${DGL_PRODUCER_LDFLAGS} ${DGL_LIBS}" )
SET( DGL_LIB_FLAGS "${DGL_PRODUCER_LDFLAGS} ${DGL_LIB_FLAGS}" )

# Find OpenSceneGraph headers and libraries
INCLUDE( FindOSG )
IF( OSG_FOUND )
	IF( CMAKE_BUILD_TYPE MATCHES "DEBUG" )
		SET( DGL_OSG_LIBRARY ${OSG_LIBRARY_DEBUG} )
		SET( DGL_OSGUTIL_LIBRARY ${OSGUTIL_LIBRARY_DEBUG} )
		SET( DGL_OSGDB_LIBRARY ${OSGDB_LIBRARY_DEBUG} )
		SET( DGL_OSGTEXT_LIBRARY ${OSGTEXT_LIBRARY_DEBUG} )
		SET( DGL_OSGTERRAIN_LIBRARY ${OSGTERRAIN_LIBRARY_DEBUG} )
		SET( DGL_OSGFX_LIBRARY ${OSGFX_LIBRARY_DEBUG} )
		SET( DGL_OSGVIEWER_LIBRARY ${OSGVIEWER_LIBRARY_DEBUG} )
	ELSE( CMAKE_BUILD_TYPE MATCHES "DEBUG" )
		SET( DGL_OSG_LIBRARY ${OSG_LIBRARY} )
		SET( DGL_OSGUTIL_LIBRARY ${OSGUTIL_LIBRARY} )
		SET( DGL_OSGDB_LIBRARY ${OSGDB_LIBRARY} )
		SET( DGL_OSGTEXT_LIBRARY ${OSGTEXT_LIBRARY} )
		SET( DGL_OSGTERRAIN_LIBRARY ${OSGTERRAIN_LIBRARY} )
		SET( DGL_OSGFX_LIBRARY ${OSGFX_LIBRARY} )
		SET( DGL_OSGVIEWER_LIBRARY ${OSGVIEWER_LIBRARY} )
	ENDIF( CMAKE_BUILD_TYPE MATCHES "DEBUG" )

	SET( DGL_OSG_CXXFLAGS "-I${OSG_INCLUDE_DIR} ${DGL_PRODUCER_CXXFLAGS} -DDOSG_EXPORTS" )
	GET_FILENAME_COMPONENT( OSG_LIBRARY_PATH
			${DGL_OSG_LIBRARY} PATH )
	GET_FILENAME_COMPONENT( OSG_LIBRARY_NAME
			${DGL_OSG_LIBRARY} NAME )
	GET_FILENAME_COMPONENT( OSG_LIB_NAME
			${DGL_OSG_LIBRARY} NAME_WE )
	STRING( REGEX REPLACE "^lib(.*)" "\\1" OSG_LIB_NAME
			${OSG_LIB_NAME} )
	GET_FILENAME_COMPONENT( OSGUTIL_LIBRARY_NAME
			${DGL_OSGUTIL_LIBRARY} NAME )
	GET_FILENAME_COMPONENT( OSGUTIL_LIB_NAME
			${DGL_OSGUTIL_LIBRARY} NAME_WE )
	STRING( REGEX REPLACE "^lib(.*)" "\\1" OSGUTIL_LIB_NAME
			${OSGUTIL_LIB_NAME} )
	GET_FILENAME_COMPONENT( OSGDB_LIBRARY_NAME
			${DGL_OSGDB_LIBRARY} NAME )
	GET_FILENAME_COMPONENT( OSGDB_LIB_NAME
			${DGL_OSGDB_LIBRARY} NAME_WE )
	STRING( REGEX REPLACE "^lib(.*)" "\\1" OSGDB_LIB_NAME
			${OSGDB_LIB_NAME} )
	GET_FILENAME_COMPONENT( OSGTEXT_LIBRARY_NAME
			${DGL_OSGTEXT_LIBRARY} NAME )
	GET_FILENAME_COMPONENT( OSGTEXT_LIB_NAME
			${DGL_OSGTEXT_LIBRARY} NAME_WE )
	STRING( REGEX REPLACE "^lib(.*)" "\\1" OSGTEXT_LIB_NAME
			${OSGTEXT_LIB_NAME} )
	GET_FILENAME_COMPONENT( OSGTERRAIN_LIBRARY_NAME
			${DGL_OSGTERRAIN_LIBRARY} NAME )
	GET_FILENAME_COMPONENT( OSGTERRAIN_LIB_NAME
			${DGL_OSGTERRAIN_LIBRARY} NAME_WE )
	STRING( REGEX REPLACE "^lib(.*)" "\\1" OSGTERRAIN_LIB_NAME
			${OSGTERRAIN_LIB_NAME} )
	GET_FILENAME_COMPONENT( OSGFX_LIBRARY_NAME
			${DGL_OSGFX_LIBRARY} NAME )
	GET_FILENAME_COMPONENT( OSGFX_LIB_NAME
			${DGL_OSGFX_LIBRARY} NAME_WE )
	STRING( REGEX REPLACE "^lib(.*)" "\\1" OSGFX_LIB_NAME
			${OSGFX_LIB_NAME} )
	GET_FILENAME_COMPONENT( OSGVIEWER_LIBRARY_NAME
			${DGL_OSGVIEWER_LIBRARY} NAME )
	GET_FILENAME_COMPONENT( OSGVIEWER_LIB_NAME
			${DGL_OSGVIEWER_LIBRARY} NAME_WE )
	STRING( REGEX REPLACE "^lib(.*)" "\\1" OSGVIEWER_LIB_NAME
			${OSGVIEWER_LIB_NAME} )

	# Find osgPlugins directory
	IF( OSG_LIBRARY_PATH )
		IF( WIN32 )
			FILE( GLOB OSG_PLUGINS_DIR ${OSG_LIBRARY_PATH}/../bin/osgPlugins* )
		ELSE( WIN32 )
			FILE( GLOB OSG_PLUGINS_DIR ${OSG_LIBRARY_PATH}/osgPlugins* )
		ENDIF( WIN32 )
	ENDIF( OSG_LIBRARY_PATH )

	IF( DGL_ARCH_UPPER MATCHES "LINUX" )
		SET( DGL_OSG_LDFLAGS "-L${OSG_LIBRARY_PATH} -Wl,-rpath -Wl,${OSG_LIBRARY_PATH} -l${OSG_LIB_NAME} -l${OSGDB_LIB_NAME} -l${OSGTEXT_LIB_NAME} -l${OSGUTIL_LIB_NAME}" )
	ELSEIF( DGL_ARCH_UPPER MATCHES "DARWIN" )
		IF( DARWIN_VERSION LESS 9 )
			SET( DGL_OSG_LDFLAGS "-L${OSG_LIBRARY_PATH} -l${OSG_LIB_NAME} -l${OSGDB_LIB_NAME} -l${OSGTEXT_LIB_NAME} -l${OSGUTIL_LIB_NAME}" )
		ELSE( DARWIN_VERSION LESS 9 )
			SET( DGL_OSG_LDFLAGS "-L${OSG_LIBRARY_PATH} -Wl,-rpath -Wl,${OSG_LIBRARY_PATH} -l${OSG_LIB_NAME} -l${OSGDB_LIB_NAME} -l${OSGTEXT_LIB_NAME} -l${OSGUTIL_LIB_NAME}" )
		ENDIF( DARWIN_VERSION LESS 9 )
	ELSEIF( DGL_ARCH_UPPER MATCHES "WIN32" )
#		SET( DGL_OSG_LDFLAGS "-LIBPATH:${OSG_LIBRARY_PATH} ${OSG_LIBRARY_NAME} ${OSGDB_LIBRARY_NAME} ${OSGTEXT_LIBRARY_NAME} ${OSGUTIL_LIBRARY_NAME}" )
		SET( DGL_OSG_LDFLAGS "\"${OSG_LIBRARY_PATH}/${OSG_LIBRARY_NAME}\" \"${OSG_LIBRARY_PATH}/${OSGDB_LIBRARY_NAME}\" \"${OSG_LIBRARY_PATH}/${OSGTEXT_LIBRARY_NAME}\" \"${OSG_LIBRARY_PATH}/${OSGUTIL_LIBRARY_NAME}\"" )
	ENDIF( DGL_ARCH_UPPER MATCHES "LINUX" )

	SET( DOSG_INCLUDE ${DGL_OSG_CXXFLAGS} )
	IF( WIN32 )
		SET( DOSG_LIBS "${DGL_OSG_LDFLAGS} dosg.lib" )
	ELSE( WIN32 )
		SET( DOSG_LIBS "${DGL_OSG_LDFLAGS} -ldosg" )
	ENDIF( WIN32 )
ENDIF( OSG_FOUND )
OPTION( DGL_BUILD_WITH_OPENSCENEGRAPH "Build DGL with OpenSceneGraph support." ${OSG_FOUND} )

# Find Coin headers and libraries
INCLUDE( FindCoin )
IF( COIN_FOUND )
	IF( CMAKE_BUILD_TYPE MATCHES "DEBUG" )
		SET( DGL_COIN_LIBRARY ${COIN_LIBRARY_DEBUG} )
	ELSE( CMAKE_BUILD_TYPE MATCHES "DEBUG" )
		SET( DGL_COIN_LIBRARY ${COIN_LIBRARY} )
	ENDIF( CMAKE_BUILD_TYPE MATCHES "DEBUG" )

	GET_FILENAME_COMPONENT( COIN_LIBRARY_PATH ${DGL_COIN_LIBRARY} PATH )
	GET_FILENAME_COMPONENT( COIN_LIBRARY_NAME ${DGL_COIN_LIBRARY} NAME )
	GET_FILENAME_COMPONENT( COIN_LIB_NAME ${DGL_COIN_LIBRARY} NAME_WE )
	STRING( REGEX REPLACE "^lib(.*)" "\\1" COIN_LIB_NAME
			${COIN_LIB_NAME} )
	SET( COIN_INCLUDE_FLAGS "-I${COIN_INCLUDE_DIR}" )
	IF( COIN_CONFIG_BIN )
		EXECUTE_PROCESS( COMMAND ${COIN_CONFIG_BIN} --ldflags
			OUTPUT_VARIABLE COIN_LDFLAGS OUTPUT_STRIP_TRAILING_WHITESPACE )
		EXECUTE_PROCESS( COMMAND ${COIN_CONFIG_BIN} --libs
			OUTPUT_VARIABLE COIN_LIBRARY_FLAGS
			OUTPUT_STRIP_TRAILING_WHITESPACE )
		EXECUTE_PROCESS( COMMAND ${COIN_CONFIG_BIN} --cppflags
			OUTPUT_VARIABLE COIN_INCLUDE_FLAGS
			OUTPUT_STRIP_TRAILING_WHITESPACE )
	ELSE( COIN_CONFIG_BIN )
		SET( COIN_LDFLAGS "-L${COIN_LIBRARY_PATH}" )
		SET( COIN_LIBRARY_FLAGS "-l${COIN_LIBRARY_NAME}" )
	ENDIF( COIN_CONFIG_BIN )

	SET( DGL_COIN_CXXFLAGS "${COIN_INCLUDE_FLAGS} -DDCOIN_EXPORTS" )
	IF( DGL_ARCH_UPPER MATCHES "LINUX" )
		SET( DGL_COIN_LDFLAGS "${COIN_LDFLAGS} -Wl,-rpath -Wl,${COIN_LIBRARY_PATH} ${COIN_LIBRARY_FLAGS}" )
	ELSEIF( DGL_ARCH_UPPER MATCHES "DARWIN" )
		SET( DGL_COIN_LDFLAGS "${COIN_LDFLAGS} ${COIN_LIBRARY_FLAGS}" )
	ELSEIF( DGL_ARCH_UPPER MATCHES "WIN32" )
		SET( DGL_COIN_LDFLAGS "-LIBPATH:${COIN_LIBRARY_PATH} ${COIN_LIBRARY_NAME}" )
	ENDIF( DGL_ARCH_UPPER MATCHES "LINUX" )

	SET( DCOIN_INCLUDE "${COIN_INCLUDE_FLAGS} -DDCOIN_EXPORTS" )
	IF( WIN32 )
		SET( DCOIN_LIBS "${DGL_COIN_LDFLAGS} dcoin.lib" )
	ELSE( WIN32 )
		SET( DCOIN_LIBS "${DGL_COIN_LDFLAGS} -ldcoin" )
	ENDIF( WIN32 )
ENDIF( COIN_FOUND )
OPTION( DGL_BUILD_WITH_COIN "Build DGL with Coin support." ${COIN_FOUND} )

#IF( DGL_BUILD_WITH_VTK )
        SET( VTK_FIND_QUIETLY "ON" )
        INCLUDE( FindVTK )
        IF( VTK_FOUND )
        	INCLUDE( ${VTK_USE_FILE} )
        	SET( DVTK_INCLUDE "-I${VTK_INCLUDE_DIRS} ${PRODUCER_INCLUDE_FLAGS} -DDVTK_EXPORTS" )
        	SET( DGL_VTK_CXXFLAGS "-I${VTK_INCLUDE_DIRS} ${PRODUCER_INCLUDE_FLAGS} -DDVTK_EXPORTS" )
        
        	IF( DGL_ARCH_UPPER MATCHES "LINUX" )
        		SET( DGL_VTK_LDFLAGS "-L${VTK_LIBRARY_DIRS}  -Wl,-rpath -Wl,${VTK_LIBRARY_DIRS} -lvtkGraphics -lvtkCommon -lvtkFiltering -lvtkRendering -lvtkImaging -lvtkIO" )
        		SET( DVTK_LIBS "${DGL_VTK_LDFLAGS} -ldvtk" )
        	ELSEIF( DGL_ARCH_UPPER MATCHES "DARWIN" )
        		IF( DARWIN_VERSION LESS 9 )
        			SET( DGL_VTK_LDFLAGS "-L${VTK_LIBRARY_DIRS} -lvtkGraphics -lvtkCommon -lvtkFiltering -lvtkRendering -lvtkImaging -lvtkIO" )
        		ELSE( DARWIN_VERSION LESS 9 )
        			SET( DGL_VTK_LDFLAGS "-L${VTK_LIBRARY_DIRS}  -Wl,-rpath -Wl,${VTK_LIBRARY_DIRS} -lvtkGraphics -lvtkCommon -lvtkFiltering -lvtkRendering -lvtkImaging -lvtkIO" )
        		ENDIF( DARWIN_VERSION LESS 9 )
        		SET( DVTK_LIBS "${DGL_VTK_LDFLAGS} -ldvtk" )
        	ELSEIF( DGL_ARCH_UPPER MATCHES "WIN32" )
        #		SET( DGL_VTK_LDFLAGS "-LIBPATH:${VTK_LIBRARY_DIRS} vtkGraphics.lib vtkCommon.lib vtkFiltering.lib vtkRendering.lib vtkImaging.lib vtkIO.lib" )
        		SET( DGL_VTK_LDFLAGS "\"${VTK_LIBRARY_DIRS}/vtkGraphics.lib\" \"${VTK_LIBRARY_DIRS}/vtkCommon.lib\" \"${VTK_LIBRARY_DIRS}/vtkFiltering.lib\" \"${VTK_LIBRARY_DIRS}/vtkRendering.lib\" \"${VTK_LIBRARY_DIRS}/vtkImaging.lib\" \"${VTK_LIBRARY_DIRS}/vtkIO.lib\" \"${VTK_LIBRARY_DIRS}/vtkSys.lib\" \"${VTK_LIBRARY_DIRS}/vtkjpeg.lib\" \"${VTK_LIBRARY_DIRS}/vtktiff.lib\" \"${VTK_LIBRARY_DIRS}/vtkpng.lib\" \"${VTK_LIBRARY_DIRS}/vtkexpat.lib\" \"${VTK_LIBRARY_DIRS}/vtkzlib.lib\" \"${VTK_LIBRARY_DIRS}/vtkRendering.lib\" \"${VTK_LIBRARY_DIRS}/vtkGenericFiltering.lib\" \"${VTK_LIBRARY_DIRS}/vtkVolumeRendering.lib\" \"${VTK_LIBRARY_DIRS}/vtkInfoVis.lib\" \"${VTK_LIBRARY_DIRS}/vtkGeoVis.lib\" \"${VTK_LIBRARY_DIRS}/vtkHybrid.lib\" \"${VTK_LIBRARY_DIRS}/vtkViews.lib\" \"${VTK_LIBRARY_DIRS}/vtkCharts.lib\" d3d9.lib wmiutils.lib" )
        		SET( DVTK_LIBS "${DGL_VTK_LDFLAGS} dvtk.lib" )
        	ENDIF( DGL_ARCH_UPPER MATCHES "LINUX" )
        ENDIF( VTK_FOUND )
        OPTION( DGL_BUILD_WITH_VTK "Build DGL with VTK support." ${VTK_FOUND} )
#ENDIF( DGL_BUILD_WITH_VTK )

# Check to see if FLTK is to be used and available
OPTION( DGL_BUILD_WITH_FLTK "Build DGL with fltk support. Builds various FLTK based GUI programs. Support for FLTK-1.1.x only" ON )
IF( DGL_BUILD_WITH_FLTK )
	INCLUDE( FindFLTK )
	IF( FLTK_FOUND )
		GET_FILENAME_COMPONENT( FLTK_LIB_PATH ${FLTK_BASE_LIBRARY} PATH )
		GET_FILENAME_COMPONENT( FLTK_LIBRARY_NAME ${FLTK_BASE_LIBRARY} NAME_WE )
		STRING( REGEX REPLACE "^lib(.*)" "\\1" FLTK_LIB_NAME
				${FLTK_LIBRARY_NAME} )

		GET_FILENAME_COMPONENT( FLTK_GL_LIB_PATH ${FLTK_GL_LIBRARY} PATH )
		GET_FILENAME_COMPONENT( FLTK_GL_LIBRARY_NAME ${FLTK_GL_LIBRARY} NAME_WE )
		STRING( REGEX REPLACE "^lib(.*)" "\\1" FLTK_GL_LIB_NAME
				${FLTK_GL_LIBRARY_NAME} )

		SET( DGL_FLTK_INC_DIRS ${FLTK_INCLUDE_DIR} )
		SET( DGL_FLTK_GL_INC_DIRS ${FLTK_INCLUDE_DIR} ${DGL_GL_INC_DIRS} )
		SET( DGL_FLTK_LIBS ${FLTK_LIB_NAME} )
		SET( DGL_FLTK_LINK_DIRS ${FLTK_LIB_PATH} )

		IF( DGL_ARCH_UPPER MATCHES DARWIN )
			SET( DGL_FLTK_GL_LIBS ${FLTK_LIB_NAME} ${FLTK_GL_LIB_NAME} )
		ELSE( DGL_ARCH_UPPER MATCHES DARWIN )
			SET( DGL_FLTK_GL_LIBS ${FLTK_LIB_NAME} ${FLTK_GL_LIB_NAME}
					${OPENGL_gl_LIB_NAME} ${OPENGL_glu_LIB_NAME} )
		ENDIF( DGL_ARCH_UPPER MATCHES DARWIN )

		SET( DGL_FLTK_GL_LINK_DIRS ${FLTK_LIB_PATH} ${FLTK_GL_LIB_PATH} )
		SET( DGL_FLTK_LINK_FLAGS )

		IF( FLTK_CONFIG_SCRIPT )

			EXECUTE_PROCESS( COMMAND ${FLTK_CONFIG_SCRIPT} --cxxflags OUTPUT_VARIABLE
					DGL_FLTK_CXXFLAGS OUTPUT_STRIP_TRAILING_WHITESPACE )
			EXECUTE_PROCESS( COMMAND ${FLTK_CONFIG_SCRIPT} --ldflags OUTPUT_VARIABLE
					DGL_FLTK_LDFLAGS OUTPUT_STRIP_TRAILING_WHITESPACE )
			EXECUTE_PROCESS( COMMAND ${FLTK_CONFIG_SCRIPT} --use-gl --cxxflags
					OUTPUT_VARIABLE DGL_FLTK_GL_CXXFLAGS OUTPUT_STRIP_TRAILING_WHITESPACE )
			EXECUTE_PROCESS( COMMAND ${FLTK_CONFIG_SCRIPT} --use-gl --ldflags
					OUTPUT_VARIABLE DGL_FLTK_GL_LDFLAGS OUTPUT_STRIP_TRAILING_WHITESPACE )

			SET( DGL_FLTK_LDFLAGS " ${DGL_FLTK_LDFLAGS} " )
			STRING( REGEX MATCHALL "[ ^]-Wl,-rpath[, ].*[ $]"
					DGL_FLTK_RPATH_FLAGS ${DGL_FLTK_LDFLAGS} )
			STRING( REGEX MATCHALL "[ ^]-framework .*[ $]"
					DGL_FLTK_FRAMEWORK_FLAGS ${DGL_FLTK_LDFLAGS} )
			SET( DTK_FLTK_LINK_FLAGS "${DTK_FLTK_RPATH_FLAGS} ${DTK_FLTK_FRAMEWORK_FLAGS}" )

			SET( DGL_FLTK_GL_LDFLAGS " ${DGL_FLTK_GL_LDFLAGS} " )
			STRING( REGEX MATCHALL "[ ^]-Wl,-rpath[, ].*[ $]"
					DGL_FLTK_GL_RPATH_FLAGS ${DGL_FLTK_GL_LDFLAGS} )
			STRING( REGEX MATCHALL "[ ^]-framework .*[ $]"
					DGL_FLTK_GL_FRAMEWORK_FLAGS ${DGL_FLTK_GL_LDFLAGS} )
			SET( DTK_FLTK_GL_LINK_FLAGS "${DTK_FLTK_GL_RPATH_FLAGS} ${DTK_FLTK_GL_FRAMEWORK_FLAGS}" )

		ELSE( FLTK_CONFIG_SCRIPT )

			IF( DGL_ARCH_UPPER MATCHES LINUX )
				SET( DGL_FLTK_LINK_FLAGS "-Wl,-rpath,${FLTK_LIB_PATH}" )
				IF( FLTK_LIB_PATH EQUAL FLTK_GL_LIB_PATH )
					SET( DGL_FLTK_GL_LINK_FLAGS ${DGL_FLTK_LINK_FLAGS} )
				ELSE( FLTK_LIB_PATH EQUAL FLTK_GL_LIB_PATH )
					SET( DGL_FLTK_GL_LINK_FLAGS "${DGL_FLTK_LINK_FLAGS} -Wl,-rpath,${FLTK_GL_LIB_PATH}" )
				ENDIF( FLTK_LIB_PATH EQUAL FLTK_GL_LIB_PATH )
			ELSEIF( DGL_ARCH_UPPER MATCHES DARWIN )
				IF( DARWIN_VERSION GREATER 8 )
					SET( DGL_FLTK_LINK_FLAGS "-Wl,-rpath,${FLTK_LIB_PATH}" )
					IF( FLTK_LIB_PATH EQUAL FLTK_GL_LIB_PATH )
						SET( DGL_FLTK_GL_LINK_FLAGS ${DGL_FLTK_LINK_FLAGS} )
					ELSE( FLTK_LIB_PATH EQUAL FLTK_GL_LIB_PATH )
						SET( DGL_FLTK_GL_LINK_FLAGS "${DGL_FLTK_LINK_FLAGS} -Wl,-rpath,${FLTK_GL_LIB_PATH}" )
					ENDIF( FLTK_LIB_PATH EQUAL FLTK_GL_LIB_PATH )
				ENDIF( DARWIN_VERSION GREATER 8 )
				SET( DGL_FLTK_LINK_FLAGS "${DGL_FLTK_LINK_FLAGS} -framework Carbon -framework ApplicationServices" )
				SET( DGL_FLTK_GL_LINK_FLAGS "${DGL_FLTK_GL_LINK_FLAGS} -framework AGL -framework OpenGL -framework Carbon -framework ApplicationServices" )
			ENDIF( DGL_ARCH_UPPER MATCHES LINUX )

		ENDIF( FLTK_CONFIG_SCRIPT )
	ELSE( FLTK_FOUND )
		MESSAGE( "To build DGL with FLTK support you must have FLTK." )
	ENDIF( FLTK_FOUND )
ENDIF( DGL_BUILD_WITH_FLTK )

# Test to see which threads we are using
INCLUDE( FindThreads )
IF( CMAKE_USE_PTHREADS_INIT )
# Need to add the test to verify that pthreads supports the pthreads_process_shared
	SET( _DGL_USE_POSIX_SYNC ON )
ENDIF( CMAKE_USE_PTHREADS_INIT )

ADD_SUBDIRECTORY( lib )
ADD_SUBDIRECTORY( programs )
ADD_SUBDIRECTORY( DSOs )

IF( DGL_BUILD_EXAMPLES )
	ADD_SUBDIRECTORY( examples )
ENDIF( DGL_BUILD_EXAMPLES )

IF( DGL_BUILD_DOCUMENTATION )
	INCLUDE( FindDoxygen )
	IF( DOXYGEN_FOUND )
		ADD_SUBDIRECTORY( doc )
	ENDIF( DOXYGEN_FOUND )
ENDIF( DGL_BUILD_DOCUMENTATION )

SET( DGL_X_LIBS "${X11_LIBRARIES}" )
SET( DGL_X_INCLUDES "${X11_INCLUDE_DIR}" )
SET( DGL_CXX_FLAGS "${CMAKE_CXX_FLAGS} " )
SET( DGL_COMPILER ${CMAKE_CXX_COMPILER} )
SET( DGL_DEFAULT_ROOT ${CMAKE_INSTALL_PREFIX} )
SET( DGL_LIB_DIR "${CMAKE_INSTALL_PREFIX}/lib" )
SET( DGL_INCLUDE_DIR "${CMAKE_INSTALL_PREFIX}/include" )
SET( DGL_BIN_DIR "${CMAKE_INSTALL_PREFIX}/bin" )
SET( DGL_BASE_DSO_DIR "${CMAKE_INSTALL_PREFIX}/etc/dgl/DSO" )
SET( DGL_DATA_DIR "${CMAKE_INSTALL_PREFIX}/share/dgl/data" )
SET( DGL_DSO_DIR ${CMAKE_INSTALL_PREFIX}/etc/dgl/DSO )
SET( DGL_SOURCE_PATH ${DGL_SOURCE_DIR} )
IF( WIN32 )
	STRING( REPLACE "/" "\\\\" DGL_SOURCE_PATH ${DGL_SOURCE_PATH} )
	STRING( REPLACE "/" "\\\\" DGL_COMPILER ${DGL_COMPILER} )
	STRING( REPLACE "/" "\\\\" DGL_INCLUDE ${DGL_INCLUDE} )
	STRING( REPLACE "/" "\\\\" DGL_LIBS ${DGL_LIBS} )
	STRING( REPLACE "/" "\\\\" DGL_DEFAULT_ROOT ${DGL_DEFAULT_ROOT} )
	STRING( REPLACE "/" "\\\\" DGL_LIB_DIR ${DGL_LIB_DIR} )
	STRING( REPLACE "/" "\\\\" DGL_INCLUDE_DIR ${DGL_INCLUDE_DIR} )
	STRING( REPLACE "/" "\\\\" DGL_BIN_DIR ${DGL_BIN_DIR} )
	STRING( REPLACE "/" "\\\\" DGL_BASE_DSO_DIR ${DGL_BASE_DSO_DIR} )
	STRING( REPLACE "/" "\\\\" DGL_DATA_DIR ${DGL_DATA_DIR} )
	STRING( REPLACE "/" "\\\\" DGL_DSO_DIR ${DGL_DSO_DIR} )
#	STRING( REPLACE "/" "\\\\" DGL_OPENTHREADS_LDFLAGS ${DGL_OPENTHREADS_LDFLAGS} )
#	STRING( REPLACE "/" "\\\\" DGL_PRODUCER_LDFLAGS ${DGL_PRODUCER_LDFLAGS} )
ENDIF( WIN32 )
SET( DGL_DSO_PATH_ENVVAR "DGL_DSO_PATH" )
SET( DGL_DSO_FILES_ENVVAR "DGL_DSO_FILES" )
SET( DEFAULT_DSOS "desktopGroup" )
SET( DEFAULT_DISPLAY_DSO "desktopDisplay" )
IF( NOT DGL_BUILD_WITH_OPENSCENEGRAPH )
	SET( DOSG_INCLUDE " " )
	SET( DOSG_LIBS " " )
ENDIF( NOT DGL_BUILD_WITH_OPENSCENEGRAPH )
IF( NOT DGL_BUILD_WITH_COIN )
	SET( DCOIN_INCLUDE " " )
	SET( DCOIN_LIBS " " )
ENDIF( NOT DGL_BUILD_WITH_COIN )
IF( NOT DGL_BUILD_WITH_VTK )
	SET( DVTK_INCLUDE " " )
	SET( DVTK_LIBS " " )
ENDIF( NOT DGL_BUILD_WITH_VTK )

# Generate config/config.h
CONFIGURE_FILE( ${DGL_SOURCE_DIR}/include/dgl/config.h.in
		${DGL_SOURCE_DIR}/include/dgl/config.h @ONLY )

INSTALL( DIRECTORY data DESTINATION share/dgl PATTERN .svn EXCLUDE PERMISSIONS
		OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ )
INSTALL( DIRECTORY include DESTINATION . USE_SOURCE_PERMISSIONS PATTERN
		.svn EXCLUDE )

IF( NOT DIVERSE_ALL_IN_ONE_BUILD )
	CONFIGURE_FILE(
			"${CMAKE_CURRENT_SOURCE_DIR}/CMakeModules/cmake_uninstall.cmake.in"
			"${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake"
			IMMEDIATE @ONLY )

	ADD_CUSTOM_TARGET(uninstall
		"${CMAKE_COMMAND}" -P "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake" )
ENDIF( NOT DIVERSE_ALL_IN_ONE_BUILD )

