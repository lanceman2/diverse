#include <stdio.h>
#include <dosg.h>
#include "global.h"

void usage(char *name) {
  fprintf(stderr, 
	  "Usage: %s [ --verbose | \\\n"
#ifndef UNIMPLEMENTED
	  "            --splash | \\\n"
#endif
#ifndef UNIMPLEMENTED
	  "            --splashnotimeout | \\\n"
#endif
	  "            --scale S | \\\n"
	  "            --length L | \\\n"
#ifndef UNIMPLEMENTED_NEARFAR
	  "            --near N | \\\n"
	  "            --far F | \\\n"
	  "            --autonearfar\\\n" 
#endif
#ifndef UNIMPLEMENTED
	  "            --convergence C | \\\n"
#endif
	  "            --interoccular D | \\\n"
#ifndef UNIMPLEMENTED
	  "            --lod S | \\\n"
#endif
	  "            --backfacecull | \\\n"
	  "            --setname | \\\n"
	  "            --origin X Y Z H P R | \\\n"
	  "            --center [ X Y Z ] | \\\n"
	  "            --euler H P R | \\\n"
	  "            --bound [ B ] | \\\n"
#ifndef UNIMPLEMENTED
	  "            --axis | \\\n"
#endif
	  "            --response S | \\\n"
	  "            --pivot X Y Z [ H P R ] | \\\n"
	  "            --scenelight X Y Z [ W ] | \\\n"
	  "            --etherlight X Y Z [ W ] | \\\n"
	  "            --navlight X Y Z [ W ] | \\\n"
	  "            --worldlight X Y Z [ W ] | \\\n"
	  "            --nolights | \\\n"
	  "            --ambient v | \\\n"
	  "            --diffuse v | \\\n"
	  "            --specular v | \\\n"
	  "            --scene file [ ... ] \\\n"
	  "            --head file [ ... ] \\\n"
	  "            --wand file [ ... ] \\\n"
	  "            --ether file [ ... ] \\\n"
	  "            --nav file [ ... ] \\\n"
	  "            --nochild file [ ... ] \\\n"
	  "            --examine \\\n"
	  "            --dumponexit [ file ] \\\n"
	  "            [ --world ] file [ ... ] \\\n"
	  "            NULL\n"
	  " where:\n"
	  "    --verbose\n"
	  "                    print informational messages when running\n"
#ifndef UNIMPLEMENTED
	  "    --splash\n"
	  "                    display a splash screen which goes away with the\n"
	  "                    first keyboard or mouse event, or times out\n"
#endif
#ifndef UNIMPLEMENTED
	  "    --splashnotimeout\n"
	  "                    display a splash screen which goes away only with\n"
	  "                    first keyboard or mouse event\n"
#endif
	  "    --scale S\n"
	  "                    invoke DGLDisplay::scale(S)\n"
	  "    --length L\n"
	  "                    invoke DGLDisplay::length(L)\n"
	  "                    i.e. what's the length of a model unit, in meters?\n"
	  "                    for example- use .3048 if your model is in feet\n"
	  "    --interoccular D\n"
	  "                    invoke DGLDisplay::interOccular(D)\n"
#ifndef UNIMPLEMENTED_NEARFAR
	  "    --near N\n"
	  "                    invoke DGLDisplay::near(N) and DOSG::setAutoAspect(false)\n"
	  "    --far F\n"
	  "                    invoke DGLDisplay::far(F) and DOSG::setAutoAspect(false)\n"
	  "    --autonearfar\n"
	  "                    invoke DOSG::setAutoAspect(true)\n"
#endif
#ifndef UNIMPLEMENTED
	  "    --convergence C\n"
	  "                    invoke DGLDisplay::convergence(C)\n"
	  "    --lod S\n"
	  "                    change the level of detail scale factor.  Smaller\n"
	  "                    values give more detail.  Default is 1.0\n"
#endif
	  "    --backfacecull\n"
	  "                    enables backface culling\n"
	  "    --setname\n"
	  "                    will give each node returned by the file loader a name\n"
	  "                    which is the same as its file name.\n"
	  "    --origin X Y Z H P R\n"
	  "                    invoke DGL::setOrigin with the inverse of the parameters.\n"
	  "                    (The inverse is used as the model is actually moved, not the\n"
	  "                     origin, but it's easier to think of moving the origin relative\n"
	  "                     to the model.)\n"
	  "    --center [ X Y Z ]\n"
	  "                    centers the model group around dgl coordinate X, Y, Z\n" 
	  "                    by setting the (X Y Z) components of DGL::setOrigin().\n"
	  "    --euler H P R\n"
	  "                    sets the (H P R) component of DGL::setOrigin() with the inverse\n"
	  "                    of the H P R rotation.  See the note in --origin.\n"
	  "    --bound [ B ]\n"
	  "                    invokes DGLDisplay::scale() to fit the model group into\n"
	  "                    a cube (2.0*B) dgl units/side, or 2.0 if B is omitted\n"
	  "                    NOTE: bound only uses objects loaded under the world node.\n"
	  "    --pivot X Y Z [ H P R ]\n"
	  "                    invokes dtkNav::pivot(X, Y, Z, H, P, R)  If H P and R\n"
	  "                    are omitted, zeros are passed in their place\n"
#ifndef UNIMPLEMENTED
	  "    --axis\n"
	  "                    loads `axis.pfb' at the origin, or pivot if defined.\n"
	  "                    world coordinates are used unless the scene option\n"
	  "                    is specified\n"
#endif
	  "    --response S\n"
	  "                    invoke dtkNav::response(S)\n"
	  "    --scenelight X Y Z [ W ]\n"
	  "                    add a light under the scene node at location (X, Y, Z, W).\n"
	  "                    By default a scenelight at (0,-.707,.707, 0) is created.\n"
	  "    --etherlight X Y Z [ W ]\n"
	  "                    add a light under the ether node at location (X, Y, Z, W).\n"
	  "    --navlight X Y Z [ W ]\n"
	  "                    add a light under the nav node at location (X, Y, Z, W).\n"
	  "    --worldlight X Y Z [ W ]\n"
	  "                    add a light under the world node at location (X, Y, Z, W).\n"
	  "    --nolights\n"
	  "                    removes the default light\n"
	  "    --ambient f\n"
	  "                    sets the ambient light value; v is between 0 and 1 inclusive,\n"
	  "                    the default is %2.1f\n"
	  "    --diffuse f\n"
	  "                    sets the diffuse light value; v is between 0 and 1 inclusive,\n"
	  "                    the default is %2.1f\n"
	  "    --specular f\n"
	  "                    sets the specular light value; v is between 0 and 1 inclusive,\n"
	  "                    the default is %2.1f\n"
	  "    --scene file [ ... ] \n"
	  "                    loads one or more files under the scene node\n"
	  "    --head file [ ... ] \n"
	  "                    loads one or more files under the head node\n"
	  "    --wand file [ ... ] \n"
	  "                    loads one or more files under the wand node\n"
	  "    --ether file [ ... ] \n"
	  "                    loads one or more files under the ether node\n"
	  "    --nav file [ ... ] \n"
	  "                    loads one or more files under the nav node\n"
	  "    --nochild file [ ... ] \n"
	  "                    loads one or more files, but they are not made children of\n"
	  "                    any node.  It's up to DSOs or other files to use the nodes,\n"
	  "                    which ought to be named by the loader to have any utility.\n"
	  "    --examine       \n"
	  "                    sets scale and origin so that the bounding\n"
	  "                    sphere of all files is at (%1d,%1d,%1d), radius %1d.\n"
	  "                    Also sets the pivot point to the center of the loaded files.\n"
	  "    --dumponexit [ file ] \n"
	  "                    dumps the scenegraph starting at the scene node to the named file.\n"
	  "                    If no file name is given, it uses the file name \"%s\"\n"
	  "    [ --world ] file [ ... ] \n"
	  "                    loads one or more files under the world node\n"
	  "                    If no node is specified, the world node is used.\n"
	  "    NULL\n"
	  "                    indicates that no files should be loaded\n"
	  " \"--\" options can be abbreviated with minimal unique letters, for example:\n"
	  "    the \"--verbose\" option can be given as just \"--v\"\n\n"
	  " Since options can conflict (like --scale and --bound), the rightmost value\n"
	  "    takes precedence.\n"
	  " If neither --scene, --head, --wand, --nav or --ether is specified, the default\n"
	  "    parent node is world.\n"
#ifndef UNIMPLEMENTED
	  " A note about lighting:  the optional \"W\" parameter to the  --scenelight, --etherlight\n"
	  "    --navlight and --worldlight options is used to calculate the distance from the light\n"
	  "    source to the origin.  If \"W\" is not zero, then a point light radiating uniformly\n"
	  "    in all directions is placed at (X/W, Y/W, Z/W).  If \"W\" is zero, which is the default,\n"
	  "    a light source is created that is infinitely distant, in the direction of the vector\n"
	  "    from (X, Y. Z) to the origin of the specified coordinate system.\n"
#endif
	  ,name, ambient, diffuse, specular,
	  (int)examineCenter.x, (int)examineCenter.y, (int)examineCenter.z,
	  (int)examineBound, dumpOnExitFilename.c_str()
	  ) ;
}
