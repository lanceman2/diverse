# CMakeLists.txt to build DADS

PROJECT( DADS )

# DEFINE INFORMATION REQUIRED FOR GLOBAL CONFIGURATION OF DIVERSE
SET( DADS_MAJOR_VERSION 3 )
SET( DADS_MINOR_VERSION 0 )
SET( DADS_BUILD_VERSION 1 )
SET( DADS_VERSION
"${DADS_MAJOR_VERSION}.${DADS_MINOR_VERSION}.${DADS_BUILD_VERSION}" )

SET( LIBDSOCKET_MAJOR_VERSION 1 )
SET( LIBDSOCKET_MINOR_VERSION 0 )
SET( LIBDSOCKET_BUILD_VERSION 1 )
SET( LIBDSOCKET_VERSION
"${LIBDSOCKET_MAJOR_VERSION}.${LIBDSOCKET_MINOR_VERSION}.${LIBDSOCKET_BUILD_VERSION}" )

SET( LIBDMESSAGE_MAJOR_VERSION 1 )
SET( LIBDMESSAGE_MINOR_VERSION 0 )
SET( LIBDMESSAGE_BUILD_VERSION 1 )
SET( LIBDMESSAGE_VERSION
"${LIBDMESSAGE_MAJOR_VERSION}.${LIBDMESSAGE_MINOR_VERSION}.${LIBDMESSAGE_BUILD_VERSION}" )

SET( DADS_HOMEPAGE "http://diverse.sourceforge.net/" )
SET( DADS_RELEASE_DATE "Tue May 15 18:00:00 EDT 2007" )

SET( PACKAGE "dads" )
SET( PACKAGE_BUGREPORT "diverse-devel@lists.sourceforge.net" )
SET( PACKAGE_NAME "DIVERSE Adaptable Display System" )
SET( PACKAGE_STRING "DIVERSE Adaptable Display System ${DADS_VERSION}" )
SET( PACKAGE_TARNAME "dads" )
# END DEFINITIONS

SET( BUILD_SHARED_LIBS ON )
SET( CMAKE_SKIP_RPATH OFF )
SET( CMAKE_INSTALL_RPATH_USE_LINK_PATH ON )
SET( CMAKE_BUILD_WITH_INSTALL_RPATH ON )
SET( CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib" )
SET( CMAKE_INSTALL_NAME_DIR "${CMAKE_INSTALL_PREFIX}/lib" )

# Package distribution
IF( NOT DIVERSE_ALL_IN_ONE_BUILD )
	SET( CPACK_PACKAGE_DESCRIPTION_SUMMARY "DADS ${DADS_VERSION}" )
	SET( CPACK_PACKAGE_NAME "dads" )
	SET( CPACK_PACKAGE_VENDOR "The DIVERSE Team" )
	SET( CPACK_PACKAGE_VERSION_MAJOR "${DADS_MAJOR_VERSION}" )
	SET( CPACK_PACKAGE_VERSION_MINOR "${DADS_MINOR_VERSION}" )
	SET( CPACK_PACKAGE_VERSION_PATCH "${DADS_BUILD_VERSION}" )
	SET( CPACK_RESOURCE_FILE_LICENSE "${DADS_SOURCE_DIR}/dtk/COPYING.GPL" )
	SET( CPACK_GENERATOR "TGZ;TBZ2;ZIP" )
	SET( CPACK_SOURCE_GENERATOR "TGZ;TBZ2;ZIP" )
	IF( ${CMAKE_SYSTEM_NAME} MATCHES "Darwin" )
		SET( CPACK_BINARY_GENERATOR "TGZ;TBZ2;ZIP;PackageMaker" )
	ELSEIF( ${CMAKE_SYSTEM_NAME} MATCHES "Windows" )
		SET( CPACK_BINARY_GENERATOR "ZIP;NSIS;MSI" )
	ELSE( ${CMAKE_SYSTEM_NAME} MATCHES "Darwin" )
		SET( CPACK_BINARY_GENERATOR "TGZ;TBZ2;ZIP" )
	ENDIF( ${CMAKE_SYSTEM_NAME} MATCHES "Darwin" )
	INCLUDE( CPack )
	IF( UNIX )
		INCLUDE(UseRPMTools )
		IF(RPMTools_FOUND )
			RPMTools_ADD_RPM_TARGETS(dads )
		ENDIF(RPMTools_FOUND )
	ENDIF( UNIX )
ENDIF( NOT DIVERSE_ALL_IN_ONE_BUILD )

IF( DEFINED DIVERSE_STYLE_SHEET )
ELSE( DEFINED DIVERSE_STYLE_SHEET )
	SET( DIVERSE_STYLE_SHEET "docs.css" )
ENDIF( DEFINED DIVERSE_STYLE_SHEET )

SET( DADS_ARCH ${CMAKE_SYSTEM_NAME} )
EXECUTE_PROCESS( COMMAND echo ${DADS_ARCH} COMMAND tr '[:lower:]' '[:upper:]'
		OUTPUT_VARIABLE DADS_ARCH_UPPER
		OUTPUT_STRIP_TRAILING_WHITESPACE )
SET( DADS_PROCESSOR ${CMAKE_SYSTEM_PROCESSOR} )
EXECUTE_PROCESS( COMMAND date OUTPUT_VARIABLE DADS_COMPILE_DATE
		OUTPUT_STRIP_TRAILING_WHITESPACE )
EXECUTE_PROCESS( COMMAND whoami OUTPUT_VARIABLE DADS_WHO_COMPILED
		OUTPUT_STRIP_TRAILING_WHITESPACE )
EXECUTE_PROCESS( COMMAND hostname OUTPUT_VARIABLE DADS_COMPILE_HOST
		OUTPUT_STRIP_TRAILING_WHITESPACE )

ADD_DEFINITIONS( -DDADS_ARCH_${DADS_ARCH_UPPER} )

IF( DADS_ARCH_UPPER STREQUAL "LINUX" )
	SET( DADS_LIB_FLAGS "" )
	SET( DADS_OTHER_LIBS "" )
ELSEIF( DADS_ARCH_UPPER STREQUAL "IRIX" )
	SET( DADS_OTHER_LIBS "" )
ELSEIF( DADS_ARCH_UPPER STREQUAL "WINDOWS" )
	SET( DADS_OTHER_LIBS "" )
ELSEIF( DADS_ARCH_UPPER STREQUAL "DARWIN" )
	SET( DADS_LIB_FLAGS "" )
	SET( DADS_OTHER_LIBS "-lstdc++" )
ENDIF( DADS_ARCH_UPPER STREQUAL "LINUX" )

SET( DADS_INCLUDE "-I${CMAKE_INSTALL_PREFIX}/include" )
SET( DADS_LIBS "${DADS_LIB_FLAGS} -L${CMAKE_INSTALL_PREFIX}/lib -Wl,-rpath -Wl,${CMAKE_INSTALL_PREFIX}/lib -ldads" )

IF( DIVERSE_ALL_IN_ONE_BUILD )
	SET( DTK_CONFIG_BIN "LD_LIBRARY_PATH=${DIVERSE_BINARY_DIR}/dtk/lib/dtk ${DIVERSE_BINARY_DIR}/dtk/config/dtk-config" )
	SET( DTK_DIR ${DIVERSE_SOURCE_DIR}/dtk )
	EXECUTE_PROCESS( COMMAND ${DTK_CONFIG_BIN} --version
		OUTPUT_VARIABLE DTK_VERSION OUTPUT_STRIP_TRAILING_WHITESPACE )
	EXECUTE_PROCESS( COMMAND ${DTK_CONFIG_BIN} --cflags
		OUTPUT_VARIABLE DTK_CXX_FLAGS OUTPUT_STRIP_TRAILING_WHITESPACE )
	EXECUTE_PROCESS( COMMAND ${DTK_CONFIG_BIN} --libs
		OUTPUT_VARIABLE DTK_LIB_FLAGS OUTPUT_STRIP_TRAILING_WHITESPACE )
	EXECUTE_PROCESS( COMMAND ${DTK_CONFIG_BIN} --include
		OUTPUT_VARIABLE DTK_INCLUDE_FLAGS OUTPUT_STRIP_TRAILING_WHITESPACE )
	SET( DTK_LIB "dtk" )
	SET( DTK_INCLUDE "${DTK_DIR}/include" )
ELSE( DIVERSE_ALL_IN_ONE_BUILD )
	FIND_PROGRAM( DTK_CONFIG_BIN dtk-config ENV PATH DOC "Location of dtk-config" )
	IF( DTK_CONFIG_BIN )
		EXECUTE_PROCESS( COMMAND ${DTK_CONFIG_BIN} --root
			OUTPUT_VARIABLE DTK_DIR OUTPUT_STRIP_TRAILING_WHITESPACE )
		EXECUTE_PROCESS( COMMAND ${DTK_CONFIG_BIN} --version
			OUTPUT_VARIABLE DTK_VERSION OUTPUT_STRIP_TRAILING_WHITESPACE )
		EXECUTE_PROCESS( COMMAND ${DTK_CONFIG_BIN} --cflags
			OUTPUT_VARIABLE DTK_CXX_FLAGS OUTPUT_STRIP_TRAILING_WHITESPACE )
		EXECUTE_PROCESS( COMMAND ${DTK_CONFIG_BIN} --libs
			OUTPUT_VARIABLE DTK_LIB_FLAGS OUTPUT_STRIP_TRAILING_WHITESPACE )
		EXECUTE_PROCESS( COMMAND ${DTK_CONFIG_BIN} --include
			OUTPUT_VARIABLE DTK_INCLUDE_FLAGS OUTPUT_STRIP_TRAILING_WHITESPACE )
		SET( DTK_LIB "${DTK_LIB_FLAGS}" )
		SET( DTK_INCLUDE "${DTK_DIR}/include" )
	ENDIF( DTK_CONFIG_BIN )
ENDIF( DIVERSE_ALL_IN_ONE_BUILD )

SET( DADS_INCLUDE "${DTK_INCLUDE_FLAGS} ${DADS_INCLUDE}" )
SET( DADS_LIBS "${DTK_LIB_FLAGS} ${DADS_LIBS}" )

OPTION( DADS_BUILD_WITHOUT_DADS "Build other features of the package without building DADS." OFF )

INCLUDE( FindQt3 )
IF( QT_FOUND )
	SET( DADS_FOUND_QT3 ON )
ELSE( QT_FOUND )
	SET( DADS_FOUND_QT3 OFF )
ENDIF( QT_FOUND )

OPTION( DADS_BUILD_DISPLAYSWITCHD "Build displayswitchd - a daemon for switching displays using Extron CrossPoint Matrix Switcher." ON )

OPTION( DADS_BUILD_DISPLAYSWITCHER "Build displayswitcher - requires Qt3 and Extron CrossPoint Matrix Switcher." ${DADS_FOUND_QT3} )

OPTION( DADS_BUILD_DTKMASTERSERVER "Build dtk-masterServer and dtk-masterControl programs for easier maintenance and resetting capabilities." ON )

OPTION( DADS_BUILD_DTKSWAPSERVER "Build dtk-swapServer to convert endianess of DTK shared memory segments and translate to VRCO shared memory." ON )

OPTION( DADS_BUILD_DTKVRCOSERVER "Build dtk-VRCOServer used to translate DTK shared memory to VRCO shared memory" ON )

OPTION( DADS_BUILD_DOCUMENTATION "Install DADS documentation." ON )

IF( UNIX )
	INCLUDE( FindX11 )
	IF( X11_X11_LIB )
		EXECUTE_PROCESS( COMMAND dirname ${X11_X11_LIB}
			OUTPUT_VARIABLE X11_LIB_PATH OUTPUT_STRIP_TRAILING_WHITESPACE )
	ENDIF( X11_X11_LIB )
	FIND_PATH( GLX_HEADER_PATH GL/glxext.h PATHS ${X11_X11_INCLUDE_PATH} /usr
		/usr/local DOC "Location of GL/glxext.h" )
	IF( GLX_HEADER_PATH )
		EXECUTE_PROCESS( COMMAND grep -q glXJoinSwapGroupNV ${GLX_HEADER_PATH}/GL/glxext.h
			RESULT_VARIABLE HAS_GLXJOINSWAPGROUPNV )
		IF( HAS_GLXJOINSWAPGROUPNV EQUAL 0 )
			SET( DADS_HAS_GLXJOINSWAPGROUPNV ON )
		ELSE( HAS_GLXJOINSWAPGROUPNV EQUAL 0 )
			SET( DADS_HAS_GLXJOINSWAPGROUPNV OFF )
		ENDIF( HAS_GLXJOINSWAPGROUPNV EQUAL 0 )
	ENDIF( GLX_HEADER_PATH )
	OPTION( DADS_BUILD_NVSWAPBARRIER "Build nvswapbarrier DSO for use with NVIDIA Quadro cards which support framelock and genlock."
		${DADS_HAS_GLXJOINSWAPGROUPNV} )
ENDIF( UNIX )

ADD_SUBDIRECTORY( lib )
ADD_SUBDIRECTORY( programs )
ADD_SUBDIRECTORY( DSOs )
ADD_SUBDIRECTORY( scripts )
IF( DADS_BUILD_DOCUMENTATION )
	INCLUDE( FindDoxygen )
	ADD_SUBDIRECTORY( doc )
ENDIF( DADS_BUILD_DOCUMENTATION )

SET( DADS_DSO_DIR etc/dtk/augmentDSO )
IF( DIVERSE_ALL_IN_ONE_BUILD )
	SET( DADS_DSO_DIR ${DTK_AUGMENT_DIR} )
ELSE( DIVERSE_ALL_IN_ONE_BUILD )
	EXECUTE_PROCESS( COMMAND ${DTK_CONFIG_BIN} --augment-dso-dir
			OUTPUT_VARIABLE DADS_DSO_DIR OUTPUT_STRIP_TRAILING_WHITESPACE )
ENDIF( DIVERSE_ALL_IN_ONE_BUILD )

IF( NOT DIVERSE_ALL_IN_ONE_BUILD )
CONFIGURE_FILE(
	"${CMAKE_CURRENT_SOURCE_DIR}/CMakeModules/cmake_uninstall.cmake.in"
	"${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake"
	IMMEDIATE @ONLY )

ADD_CUSTOM_TARGET(uninstall
	"${CMAKE_COMMAND}" -P "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake" )
ENDIF( NOT DIVERSE_ALL_IN_ONE_BUILD )

