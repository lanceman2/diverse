# CMakeLists.txt to build DTK

PROJECT( DTK )

IF( COMMAND CMAKE_POLICY )
	cmake_policy( SET CMP0000 OLD )
	cmake_policy( SET CMP0002 OLD )
	cmake_policy( SET CMP0003 OLD )
	cmake_policy( SET CMP0005 OLD )
	cmake_policy( SET CMP0006 OLD )
ENDIF( COMMAND CMAKE_POLICY )

SET(CMAKE_MODULE_PATH
"${DTK_SOURCE_DIR}/CMakeModules;${CMAKE_MODULE_PATH}" )

# DEFINE INFORMATION REQUIRED FOR GLOBAL CONFIGURATION OF DIVERSE
SET( DTK_MAJOR_VERSION 3 )
SET( DTK_MINOR_VERSION 0 )
SET( DTK_BUILD_VERSION 1 )
SET( DTK_VERSION
"${DTK_MAJOR_VERSION}.${DTK_MINOR_VERSION}.${DTK_BUILD_VERSION}" )

SET( LIBDTK_MAJOR_VERSION 2 )
SET( LIBDTK_MINOR_VERSION 0 )
SET( LIBDTK_BUILD_VERSION 2 )
SET( LIBDTK_VERSION
"${LIBDTK_MAJOR_VERSION}.${LIBDTK_MINOR_VERSION}.${LIBDTK_BUILD_VERSION}" )

SET( LIBDTKX11_MAJOR_VERSION 1 )
SET( LIBDTKX11_MINOR_VERSION 0 )
SET( LIBDTKX11_BUILD_VERSION 0 )
SET( LIBDTKX11_VERSION
"${LIBDTKX11_MAJOR_VERSION}.${LIBDTKX11_MINOR_VERSION}.${LIBDTKX11_BUILD_VERSION}" )

SET( LIBDTKGLX_MAJOR_VERSION 0 )
SET( LIBDTKGLX_MINOR_VERSION 0 )
SET( LIBDTKGLX_BUILD_VERSION 0 )
SET( LIBDTKGLX_VERSION
"${LIBDTKGLX_MAJOR_VERSION}.${LIBDTKGLX_MINOR_VERSION}.${LIBDTKGLX_BUILD_VERSION}" )

SET( LIBDTKFLTK_MAJOR_VERSION 2 )
SET( LIBDTKFLTK_MINOR_VERSION 0 )
SET( LIBDTKFLTK_BUILD_VERSION 2 )
SET( LIBDTKFLTK_VERSION
"${LIBDTKFLTK_MAJOR_VERSION}.${LIBDTKFLTK_MINOR_VERSION}.${LIBDTKFLTK_BUILD_VERSION}" )

SET( LIBDTKAL_MAJOR_VERSION 0 )
SET( LIBDTKAL_MINOR_VERSION 0 )
SET( LIBDTKAL_BUILD_VERSION 0 )
SET( LIBDTKAL_VERSION
"${LIBDTKAL_MAJOR_VERSION}.${LIBDTKAL_MINOR_VERSION}.${LIBDTKAL_BUILD_VERSION}" )

SET( DTK_HOMEPAGE "http://diverse.sourceforge.net/" )
SET( DTK_RELEASE_DATE "Fri Dec 12 18:00:00 EDT 2008" )
SET( DTK_DEFAULT_SERVER_PORT "34219" )
IF( WIN32 )
	SET( DTK_DEFAULT_SHAREDMEM_DIR "C:\\\\WUTemp\\\\dtkSharedMem" )
ELSE( WIN32 )
	SET( DTK_DEFAULT_SHAREDMEM_DIR "/tmp/dtkSharedMem" )
ENDIF( WIN32 )
SET( DTK_DEFAULT_SERVER_CONNECTION "localhost:${DTK_DEFAULT_SERVER_PORT}" )
SET( DTK_DEFAULT_SERVER_ADDRESS "localhost" )

SET( PACKAGE "dtk" )
SET( PACKAGE_BUGREPORT "diverse-devel@lists.sourceforge.net" )
SET( PACKAGE_NAME "DIVERSE_TOOLKIT" )
SET( PACKAGE_STRING "DIVERSE Toolkit ${DTK_VERSION}" )
SET( PACKAGE_TARNAME "dtk" )
# END DEFINITIONS

SET( BUILD_SHARED_LIBS ON )
SET( CMAKE_SKIP_RPATH OFF )
SET( CMAKE_INSTALL_RPATH_USE_LINK_PATH ON )
SET( CMAKE_BUILD_WITH_INSTALL_RPATH ON )
SET( CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib" )
SET( CMAKE_INSTALL_NAME_DIR "${CMAKE_INSTALL_PREFIX}/lib" )

# Package distribution
IF( NOT DIVERSE_ALL_IN_ONE_BUILD )
	SET( CPACK_PACKAGE_DESCRIPTION_SUMMARY "DTK ${DTK_VERSION}" )
	SET( CPACK_PACKAGE_NAME "dtk" )
	SET( CPACK_PACKAGE_VENDOR "The DIVERSE Team" )
	SET( CPACK_PACKAGE_VERSION_MAJOR "${DTK_MAJOR_VERSION}" )
	SET( CPACK_PACKAGE_VERSION_MINOR "${DTK_MINOR_VERSION}" )
	SET( CPACK_PACKAGE_VERSION_PATCH "${DTK_BUILD_VERSION}" )
	SET( CPACK_RESOURCE_FILE_LICENSE "${DTK_SOURCE_DIR}/COPYING.GPL" )
	SET( CPACK_GENERATOR "TGZ;TBZ2;ZIP" )
	SET( CPACK_SOURCE_GENERATOR "TGZ;TBZ2;ZIP" )
	IF( ${CMAKE_SYSTEM_NAME} MATCHES "Darwin" )
		SET( CPACK_BINARY_GENERATOR "TGZ;TBZ2;ZIP;PackageMaker" )
	ELSEIF( ${CMAKE_SYSTEM_NAME} MATCHES "Windows" )
		SET( CPACK_BINARY_GENERATOR "ZIP;NSIS;MSI" )
	ELSE( ${CMAKE_SYSTEM_NAME} MATCHES "Darwin" )
		SET( CPACK_BINARY_GENERATOR "TGZ;TBZ2;ZIP" )
	ENDIF( ${CMAKE_SYSTEM_NAME} MATCHES "Darwin" )
	INCLUDE( CPack )
	IF( UNIX )
		INCLUDE( UseRPMTools )
		IF( RPMTools_FOUND )
			RPMTools_ADD_RPM_TARGETS( dtk )
	ENDIF( RPMTools_FOUND )
ENDIF( UNIX )
ENDIF( NOT DIVERSE_ALL_IN_ONE_BUILD )

IF( DEFINED DIVERSE_STYLE_SHEET )
ELSE( DEFINED DIVERSE_STYLE_SHEET )
	SET( DIVERSE_STYLE_SHEET "docs.css" )
ENDIF( DEFINED DIVERSE_STYLE_SHEET )

SET( DTK_ARCH ${CMAKE_SYSTEM_NAME} )
SET( DTK_PROCESSOR ${CMAKE_SYSTEM_PROCESSOR} )
IF( UNIX )
	EXECUTE_PROCESS( COMMAND echo ${DTK_ARCH} COMMAND tr '[:lower:]' '[:upper:]'
			OUTPUT_VARIABLE DTK_ARCH_UPPER OUTPUT_STRIP_TRAILING_WHITESPACE )
	EXECUTE_PROCESS( COMMAND date OUTPUT_VARIABLE DTK_COMPILE_DATE
			OUTPUT_STRIP_TRAILING_WHITESPACE )
	EXECUTE_PROCESS( COMMAND whoami OUTPUT_VARIABLE DTK_WHO_COMPILED
			OUTPUT_STRIP_TRAILING_WHITESPACE )
	EXECUTE_PROCESS( COMMAND hostname OUTPUT_VARIABLE DTK_COMPILE_HOST
			OUTPUT_STRIP_TRAILING_WHITESPACE )
ELSEIF( WIN32 )
	SET( DTK_ARCH_UPPER WIN32_VCPP )
	EXECUTE_PROCESS( COMMAND date /t OUTPUT_VARIABLE DTK_COMPILE_DATE
			OUTPUT_STRIP_TRAILING_WHITESPACE )
	IF( NOT DTK_COMPILE_DATE )
		SET( DTK_COMPILE_DATE ${DTK_RELEASE_DATE} )
	ENDIF( NOT DTK_COMPILE_DATE )
	SET( DTK_WHO_COMPILED $ENV{USERNAME} )
	SET( DTK_COMPILE_HOST $ENV{USERDOMAIN} )
ENDIF( UNIX )

SET( DARWIN_GL_FIX_FLAGS "" )
IF( DTK_ARCH_UPPER STREQUAL "DARWIN" )
	STRING( REGEX REPLACE "\\..*" "" DARWIN_VERSION ${CMAKE_SYSTEM_VERSION} )
	IF( DARWIN_VERSION EQUAL 9 )
		SET( DARWIN_GL_FIX_FLAGS "-dylib_file /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGL.dylib:/System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGL.dylib" )
	ENDIF( DARWIN_VERSION EQUAL 9 )
ENDIF( DTK_ARCH_UPPER STREQUAL "DARWIN" )

IF( ${DTK_PROCESSOR} MATCHES "x86_64" )
	OPTION( DTK_BUILD_WITH_32BIT_SUPPORT "Build with 32 bit support instead of 64bit support" OFF )
	IF( NOT DTK_BUILD_WITH_32BIT_SUPPORT )
		SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DDTK_USE_64_BIT" )
	ENDIF( NOT DTK_BUILD_WITH_32BIT_SUPPORT )
ENDIF( ${DTK_PROCESSOR} MATCHES "x86_64" )

# Test to see which threads we are using
INCLUDE( FindThreads )
IF( CMAKE_USE_PTHREADS_INIT )
# Need to add the test to verify that pthreads supports the pthreads_process_shared
	IF( ${DTK_ARCH_UPPER} MATCHES "DARWIN" )
		SET( _DTK_USE_POSIX_SYNC OFF )
		SET( _DTK_USE_SYSTEM_V ON )
	ELSE( ${DTK_ARCH_UPPER} MATCHES "DARWIN" )
		SET( _DTK_USE_POSIX_SYNC ON )
		SET( _DTK_USE_SYSTEM_V OFF )
	ENDIF( ${DTK_ARCH_UPPER} MATCHES "DARWIN" )
	STRING( REPLACE "-l" "" THREAD_LIBRARY_NAME ${CMAKE_THREAD_LIBS_INIT} )
ELSE( CMAKE_USE_PTHREADS_INIT )
	SET( _DTK_USE_POSIX_SYNC OFF )
	SET( _DTK_USE_SYSTEM_V OFF )
ENDIF( CMAKE_USE_PTHREADS_INIT )

# Define DTK_OTHER_LDFLAGS and DTK_OTHER_LIBS for all platforms
IF( DTK_ARCH_UPPER STREQUAL "LINUX" )
	SET( DTK_OTHER_LDFLAGS "-ldl ${CMAKE_THREAD_LIBS_INIT} -lc -lm" )
	SET( DTK_OTHER_LIBS dl ${THREAD_LIBRARY_NAME} c m )
ELSEIF( DTK_ARCH_UPPER STREQUAL "IRIX" )
	SET( DTK_OTHER_LDFLAGS "" )
	SET( DTK_OTHER_LIBS )
ELSEIF( DTK_ARCH_UPPER STREQUAL "WIN32_VCPP" )
	SET( DTK_OTHER_LDFLAGS "" )
	SET( DTK_OTHER_LIBS )
ELSEIF( DTK_ARCH_UPPER STREQUAL "DARWIN" )
	SET( DTK_OTHER_LDFLAGS "-ldl ${CMAKE_THREAD_LIBS_INIT} -lc -lm" )
	SET( DTK_OTHER_LIBS dl ${THREAD_LIBRARY_NAME} c m )
ENDIF( DTK_ARCH_UPPER STREQUAL "LINUX" )

OPTION( DTK_BUILD_DOCUMENTATION "Build DTK documentation with doxygen/dot."
		ON )

OPTION( DTK_BUILD_EXAMPLES "Build example programs" OFF )

# Find X11 headers and libraries
IF( UNIX )
	INCLUDE( FindX11 )
	IF( X11_FOUND )
		IF( X11_X11_LIB AND X11_Xext_LIB AND X11_X11_INCLUDE_PATH AND X11_Xlib_INCLUDE_PATH )
			GET_FILENAME_COMPONENT( X11_LIB_PATH ${X11_X11_LIB} PATH )
			GET_FILENAME_COMPONENT( X11_LIB_NAME ${X11_X11_LIB} NAME_WE )
			STRING( REGEX REPLACE "^lib(.*)" "\\1" X11_LIB_NAME
					${X11_LIB_NAME} )

			GET_FILENAME_COMPONENT( Xext_LIB_PATH ${X11_Xext_LIB} PATH )
			GET_FILENAME_COMPONENT( Xext_LIB_NAME ${X11_Xext_LIB} NAME_WE )
			STRING( REGEX REPLACE "^lib(.*)" "\\1" Xext_LIB_NAME
					${Xext_LIB_NAME} )

			SET( DTK_X11_LDFLAGS "-L${Xext_LIB_PATH} -l${Xext_LIB_NAME} -L${X11_LIB_PATH} -l${X11_LIB_NAME}" )
			SET( DTK_X11_CXXFLAGS "-I${X11_Xlib_INCLUDE_PATH}" )

			SET( DTK_X11_INC_DIRS ${X11_Xlib_INCLUDE_PATH} )
			SET( DTK_X11_LIBS ${Xext_LIB_NAME} ${X11_LIB_NAME} )
			SET( DTK_X11_LINK_DIRS ${X11_LIB_PATH} ${Xext_LIB_PATH} )
		ENDIF( X11_X11_LIB AND X11_Xext_LIB AND X11_X11_INCLUDE_PATH AND X11_Xlib_INCLUDE_PATH )

		IF( X11_Xtst_LIB )
			GET_FILENAME_COMPONENT( Xtst_LIB_PATH ${X11_Xtst_LIB} PATH )
			GET_FILENAME_COMPONENT( Xtst_LIB_NAME ${X11_Xtst_LIB} NAME_WE )
			STRING( REGEX REPLACE "^lib(.*)" "\\1" Xtst_LIB_NAME
					${Xtst_LIB_NAME} )
			SET( DTK_Xtst_LDFLAGS "-L${Xtst_LIB_PATH} -l${Xtst_LIB_NAME}" )
			SET( DTK_Xtst_CXXFLAGS "-I${X11_Xtst_INCLUDE_PATH}" )

			SET( DTK_Xtst_LIBS ${Xtst_LIB_NAME} )
			SET( DTK_Xtst_LINK_DIRS ${Xtst_LIB_PATH} )
		ENDIF( X11_Xtst_LIB )

		OPTION( DTK_BUILD_WITH_GLX "Build DTK with GLX support. Builds a simple display providing basic support for GLX (completely unnecessary)" OFF )
		IF( DTK_BUILD_WITH_GLX )
			FIND_PATH( GLX_HEADER_PATH GL/glx.h PATHS ${X11_X11_INCLUDE_PATH}
					${X11_INC_SEARCH_PATH} DOC "Location of GL/glx.h" )
		ENDIF( DTK_BUILD_WITH_GLX )
	ELSE( X11_FOUND )
		MESSAGE( "To build DTK with X11 support you must have X11." )
	ENDIF( X11_FOUND )
ENDIF( UNIX )

# Find OpenGL headers and libraries
SET( OPENGL_NO_FRAMEWORKS "YES" )
INCLUDE( FindOpenGL )
IF( OPENGL_FOUND )
	GET_FILENAME_COMPONENT( OPENGL_gl_LIBRARY_PATH ${OPENGL_gl_LIBRARY} PATH )
	GET_FILENAME_COMPONENT( OPENGL_gl_LIBRARY_NAME ${OPENGL_gl_LIBRARY}
		NAME_WE )
	STRING( REGEX REPLACE "^lib(.*)" "\\1" OPENGL_gl_LIB_NAME
			${OPENGL_gl_LIBRARY_NAME} )

	GET_FILENAME_COMPONENT( OPENGL_glu_LIBRARY_PATH ${OPENGL_glu_LIBRARY} PATH )
	GET_FILENAME_COMPONENT( OPENGL_glu_LIBRARY_NAME ${OPENGL_glu_LIBRARY}
		NAME_WE )
	STRING( REGEX REPLACE "^lib(.*)" "\\1" OPENGL_glu_LIB_NAME
			${OPENGL_glu_LIBRARY_NAME} )

	SET( DTK_GL_INC_DIRS ${OPENGL_INCLUDE_DIR} )
	SET( DTK_GL_LINK_DIRS ${OPENGL_gl_LIBRARY_PATH} ${OPENGL_glu_LIBRARY_PATH} )
	SET( DTK_GL_LIBS ${OPENGL_gl_LIB_NAME} ${OPENGL_glu_LIB_NAME} )

	IF( DTK_ARCH_UPPER MATCHES WIN32 )
		SET( OPENGL_LIBRARY_PATH "-LIBPATH:${OPENGL_gl_LIBRARY_PATH} -LIBPATH:${OPENGL_glu_LIBRARY_PATH}" )
	ELSE( DTK_ARCH_UPPER MATCHES WIN32 )
		SET( OPENGL_LIBRARY_PATH "-L${OPENGL_gl_LIBRARY_PATH} -L${OPENGL_glu_LIBRARY_PATH}" )
	ENDIF( DTK_ARCH_UPPER MATCHES WIN32 )
ENDIF( OPENGL_FOUND )

# Check to see if FLTK is to be used and available
OPTION( DTK_BUILD_WITH_FLTK "Build DTK with fltk support. Builds various FLTK based GUI programs. Support for FLTK-1.1.x only" ON )
IF( DTK_BUILD_WITH_FLTK )
	INCLUDE( FindFLTK )
	IF( FLTK_FOUND )
		GET_FILENAME_COMPONENT( FLTK_LIB_PATH ${FLTK_BASE_LIBRARY} PATH )
		GET_FILENAME_COMPONENT( FLTK_LIBRARY_NAME ${FLTK_BASE_LIBRARY} NAME_WE )
		STRING( REGEX REPLACE "^lib(.*)" "\\1" FLTK_LIB_NAME
				${FLTK_LIBRARY_NAME} )

		GET_FILENAME_COMPONENT( FLTK_GL_LIB_PATH ${FLTK_GL_LIBRARY} PATH )
		GET_FILENAME_COMPONENT( FLTK_GL_LIBRARY_NAME ${FLTK_GL_LIBRARY} NAME_WE )
		STRING( REGEX REPLACE "^lib(.*)" "\\1" FLTK_GL_LIB_NAME
				${FLTK_GL_LIBRARY_NAME} )

		SET( DTK_FLTK_INC_DIRS ${FLTK_INCLUDE_DIR} )
		SET( DTK_FLTK_GL_INC_DIRS ${FLTK_INCLUDE_DIR} ${DTK_GL_INC_DIRS} )
		SET( DTK_FLTK_LIBS ${FLTK_LIB_NAME} )
		SET( DTK_FLTK_LINK_DIRS ${FLTK_LIB_PATH} )

		IF( DTK_ARCH_UPPER MATCHES DARWIN )
			SET( DTK_FLTK_GL_LIBS ${FLTK_LIB_NAME} ${FLTK_GL_LIB_NAME} )
		ELSE( DTK_ARCH_UPPER MATCHES DARWIN )
			SET( DTK_FLTK_GL_LIBS ${FLTK_LIB_NAME} ${FLTK_GL_LIB_NAME}
					${OPENGL_gl_LIB_NAME} ${OPENGL_glu_LIB_NAME} )
		ENDIF( DTK_ARCH_UPPER MATCHES DARWIN )

		SET( DTK_FLTK_GL_LINK_DIRS ${FLTK_LIB_PATH} ${FLTK_GL_LIB_PATH} )
		SET( DTK_FLTK_LINK_FLAGS )

			IF( DTK_ARCH_UPPER MATCHES LINUX )
				SET( DTK_FLTK_LINK_FLAGS
                                    "-Wl,-rpath,${FLTK_LIB_PATH} -L${FLTK_LIB_PATH}" )
                                SET( DTK_FLTK_LIBS "${DTK_FLTK_LIBS} -lX11 -lXext" )
				IF( FLTK_LIB_PATH EQUAL FLTK_GL_LIB_PATH )
					SET( DTK_FLTK_GL_LINK_FLAGS ${DTK_FLTK_LINK_FLAGS} )
				ELSE( FLTK_LIB_PATH EQUAL FLTK_GL_LIB_PATH )
					SET( DTK_FLTK_GL_LINK_FLAGS "${DTK_FLTK_LINK_FLAGS} -Wl,-rpath,${FLTK_GL_LIB_PATH}" )
				ENDIF( FLTK_LIB_PATH EQUAL FLTK_GL_LIB_PATH )
			ELSEIF( DTK_ARCH_UPPER MATCHES DARWIN )
				IF( DARWIN_VERSION GREATER 8 )
					SET( DTK_FLTK_LINK_FLAGS "-Wl,-rpath,${FLTK_LIB_PATH}" )
					IF( FLTK_LIB_PATH EQUAL FLTK_GL_LIB_PATH )
						SET( DTK_FLTK_GL_LINK_FLAGS ${DTK_FLTK_LINK_FLAGS} )
					ELSE( FLTK_LIB_PATH EQUAL FLTK_GL_LIB_PATH )
						SET( DTK_FLTK_GL_LINK_FLAGS "${DTK_FLTK_LINK_FLAGS} -Wl,-rpath,${FLTK_GL_LIB_PATH}" )
					ENDIF( FLTK_LIB_PATH EQUAL FLTK_GL_LIB_PATH )
				ENDIF( DARWIN_VERSION GREATER 8 )
				SET( DTK_FLTK_LINK_FLAGS "${DTK_FLTK_LINK_FLAGS} -framework Carbon -framework ApplicationServices" )
				SET( DTK_FLTK_GL_LINK_FLAGS "${DTK_FLTK_GL_LINK_FLAGS} -framework AGL -framework OpenGL -framework Carbon -framework ApplicationServices" )
			ENDIF( DTK_ARCH_UPPER MATCHES LINUX )

	ELSE( FLTK_FOUND )
		MESSAGE( "To build DTK with FLTK support you must have FLTK." )
	ENDIF( FLTK_FOUND )
ENDIF( DTK_BUILD_WITH_FLTK )

# Check to see if OpenAL and ALUT are to be used and available
OPTION( DTK_BUILD_WITH_OPENAL "Build DTK with OpenAL sound support." OFF )
IF( DTK_BUILD_WITH_OPENAL )
	INCLUDE( FindOpenAL )
	INCLUDE( FindALUT )
	IF( OPENAL_FOUND AND ALUT_FOUND )
		GET_FILENAME_COMPONENT( OPENAL_LIB_PATH ${OPENAL_LIBRARY} PATH )
		GET_FILENAME_COMPONENT( OPENAL_LIBRARY_NAME ${OPENAL_LIBRARY}
				NAME_WE )
		STRING( REGEX REPLACE "^lib(.*)" "\\1" OPENAL_LIB_NAME
				${OPENAL_LIBRARY_NAME} )

		GET_FILENAME_COMPONENT( ALUT_LIB_PATH ${ALUT_LIBRARY} PATH )
		GET_FILENAME_COMPONENT( ALUT_LIBRARY_NAME ${ALUT_LIBRARY}
				NAME_WE )
		STRING( REGEX REPLACE "^lib(.*)" "\\1" ALUT_LIB_NAME
				${ALUT_LIBRARY_NAME} )

		SET( DTK_AL_INC_DIRS ${OPENAL_INCLUDE_DIR} ${ALUT_INCLUDE_DIR} )
		SET( DTK_AL_LIBS ${OPENAL_LIB_NAME} ${ALUT_LIB_NAME} )
		SET( DTK_AL_LINK_DIRS ${OPENAL_LIB_PATH} ${ALUT_LIB_PATH} )
		SET( DTK_AL_LINK_FLAGS )

		IF( DTK_ARCH_UPPER MATCHES WIN32 )
		ELSEIF( DTK_ARCH_UPPER MATCHES DARWIN )
			IF( ${OPENAL_INCLUDE_DIR} MATCHES ".framework" )
				SET( DTK_AL_LINK_FLAGS ${OPENAL_LIBRARY} )
				SET( DTK_AL_LINK_DIRS )
				SET( DTK_AL_LIBS )
			ELSE( ${OPENAL_INCLUDE_DIR} MATCHES ".framework" )
				IF( DARWIN_VERSION GREATER 8 )
					SET( DTK_AL_LINK_FLAGS "-Wl,-rpath,${OPENAL_LIB_PATH} -Wl,-rpath,${ALUT_LIB_PATH}" )
				ENDIF( DARWIN_VERSION GREATER 8 )
			ENDIF( ${OPENAL_INCLUDE_DIR} MATCHES ".framework" )
		ELSEIF( DTK_ARCH_UPPER MATCHES LINUX )
			SET( DTK_AL_LINK_FLAGS "-Wl,-rpath,${OPENAL_LIB_PATH} -Wl,-rpath,${ALUT_LIB_PATH}" )
		ENDIF( DTK_ARCH_UPPER MATCHES WIN32 )
	ELSE( OPENAL_FOUND AND ALUT_FOUND )
		MESSAGE( "To build DTK with OpenAL support you must have both OpenAL and ALUT" )
	ENDIF( OPENAL_FOUND AND ALUT_FOUND )
ENDIF( DTK_BUILD_WITH_OPENAL )

SET( DTK_DOC_DEPENDS dtk-config dtk-augmentManager dtk-checkService
	dtk-connectRemoteSharedMem dtk-connectServer dtk-loadService dtk-pingServer
	dtk-resetService dtk-shutdownServer dtk-unloadService dtk-checkColor
	dtk-fsleep dtk-msgDebug dtk-msgError dtk-msgInfo dtk-msgNotice dtk-msgWarning
	dtk-printEnv dtk-copyShm dtk-destroySharedMem dtk-getSharedMem dtk-getSize
	dtk-listFilters dtk-loadFilter dtk-noiseFloats dtk-printSharedMemAddresses
	dtk-readButtons dtk-readCAVEDevices dtk-readChars dtk-readDoubles
	dtk-readFloats dtk-readLine dtk-readStrings dtk-unloadFilter
	dtk-writeDoubles dtk-writeFloats dtk-writeLine dtk-writeShm dtk-writeStrings
	dtk-zeroShm dtk-server )

IF( X11_FOUND )
	SET( DTK_DOC_DEPENDS ${DTK_DOC_DEPENDS} dtk-xwand )
ENDIF( X11_FOUND )

IF( NOT WIN32 )
	SET( DTK_DOC_DEPENDS ${DTK_DOC_DEPENDS} dtk-readVRCOSysV )
ENDIF( NOT WIN32 )

IF( DTK_BUILD_WITH_FLTK )
	IF( NOT WIN32 )
		SET( DTK_DOC_DEPENDS ${DTK_DOC_DEPENDS} dtk-configServices dtk-demoRunner dtk-launcher )
	ENDIF( NOT WIN32 )
	SET( DTK_DOC_DEPENDS ${DTK_DOC_DEPENDS} dtk-buttons
		dtk-caveDeviceSimulator dtk-doubleAdjusters
		dtk-doubleCounters dtk-doubleRollers dtk-doubleSliders dtk-doubleValueInputs
		dtk-floatAdjusters dtk-floatCounters dtk-floatRollers dtk-floatSliders
		dtk-floatValueInputs dtk-gnomonDisplay dtk-doubleScope
		dtk-floatScope dtk-timeControl )
	IF( DTK_ARCH_UPPER MATCHES "LINUX" )
		SET( DTK_DOC_DEPENDS ${DTK_DOC_DEPENDS} dtk-usbProbe )
	ENDIF( DTK_ARCH_UPPER MATCHES "LINUX" )
ENDIF( DTK_BUILD_WITH_FLTK )

SET( DTK_DEFAULT_ROOT_DIR ${CMAKE_INSTALL_PREFIX} )
SET( DTK_COMPILER ${CMAKE_CXX_COMPILER} )
SET( DTK_LIB_DIR "${CMAKE_INSTALL_PREFIX}/lib" )
SET( DTK_INCLUDE_DIR "${CMAKE_INSTALL_PREFIX}/include" )
SET( DTK_BIN_DIR "${CMAKE_INSTALL_PREFIX}/bin" )
SET( DTK_AUGMENT_DIR "${CMAKE_INSTALL_PREFIX}/etc/dtk/augmentDSO" )
SET( DTK_SERVICE_DIR "${CMAKE_INSTALL_PREFIX}/etc/dtk/serviceDSO" )
SET( DTK_FILTER_DIR "${CMAKE_INSTALL_PREFIX}/etc/dtk/filterDSO" )
IF( WIN32 )
	STRING( REPLACE "/" "\\\\" DTK_LIB_DIR ${DTK_LIB_DIR} )
	STRING( REPLACE "/" "\\\\" DTK_INCLUDE_DIR ${DTK_INCLUDE_DIR} )
	STRING( REPLACE "/" "\\\\" DTK_BIN_DIR ${DTK_BIN_DIR} )
	STRING( REPLACE "/" "\\\\" DTK_AUGMENT_DIR ${DTK_AUGMENT_DIR} )
	STRING( REPLACE "/" "\\\\" DTK_SERVICE_DIR ${DTK_SERVICE_DIR} )
	STRING( REPLACE "/" "\\\\" DTK_FILTER_DIR ${DTK_FILTER_DIR} )
ENDIF( WIN32 )

ADD_SUBDIRECTORY( lib )
ADD_SUBDIRECTORY( config )
ADD_SUBDIRECTORY( server )
ADD_SUBDIRECTORY( programs )
ADD_SUBDIRECTORY( DSOs )

IF( DTK_BUILD_EXAMPLES )
	ADD_SUBDIRECTORY( examples )
ENDIF( DTK_BUILD_EXAMPLES )

IF( DTK_BUILD_DOCUMENTATION )
	INCLUDE( FindDoxygen )
	IF( DOXYGEN_FOUND )
		ADD_SUBDIRECTORY( doc )
	ENDIF( DOXYGEN_FOUND )
ENDIF( DTK_BUILD_DOCUMENTATION )

# Generate config/config.h
CONFIGURE_FILE( ${DTK_SOURCE_DIR}/config/config.h.in
		${DTK_SOURCE_DIR}/config/config.h @ONLY )

# Generate include/dtk/_config.h
IF( UNIX )
	CONFIGURE_FILE( ${DTK_SOURCE_DIR}/config/_config.h.in
			${DTK_SOURCE_DIR}/include/dtk/_config.h @ONLY )
ELSEIF( WIN32 )
	CONFIGURE_FILE( ${DTK_SOURCE_DIR}/config/_config.h.win32
			${DTK_SOURCE_DIR}/include/dtk/_config.h @ONLY )
ENDIF( UNIX )

INSTALL( DIRECTORY include DESTINATION . USE_SOURCE_PERMISSIONS PATTERN 
	.svn EXCLUDE )

IF( NOT DIVERSE_ALL_IN_ONE_BUILD )
	CONFIGURE_FILE(
			"${CMAKE_CURRENT_SOURCE_DIR}/CMakeModules/cmake_uninstall.cmake.in"
			"${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake"
			IMMEDIATE @ONLY )

	ADD_CUSTOM_TARGET( uninstall
			"${CMAKE_COMMAND}" -P "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake" )
ENDIF( NOT DIVERSE_ALL_IN_ONE_BUILD )

